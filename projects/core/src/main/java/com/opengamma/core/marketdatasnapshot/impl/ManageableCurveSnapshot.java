/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.core.marketdatasnapshot.impl;

import java.util.Map;
import java.util.Set;

import org.fudgemsg.FudgeMsg;
import org.fudgemsg.mapping.FudgeDeserializer;
import org.fudgemsg.mapping.FudgeSerializer;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.Instant;

import com.opengamma.core.marketdatasnapshot.CurveSnapshot;

/**
 * Mutable snapshot of curve data.
 */
@BeanDefinition
public class ManageableCurveSnapshot implements Bean, CurveSnapshot {

  /**
   * The valuation instant.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private Instant _valuationTime;
  /**
   * The values.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private ManageableUnstructuredMarketDataSnapshot _values;

  /**
   * Obtains a {@code ManageableCurveSnapshot}.
   *
   * @param valuationTime  the valuationTime, not null
   * @param values  the values, not null
   * @return the yield curve snapshot
   */
  public static ManageableCurveSnapshot of(final Instant valuationTime, final ManageableUnstructuredMarketDataSnapshot values) {
    return new ManageableCurveSnapshot(valuationTime, values);
  }

  /**
   * Default constructor.
   */
  public ManageableCurveSnapshot() {
  }

  /**
   * Creates a curve snapshot.
   * @param valuationTime  the valuation time, not null
   * @param values  the values, not null
   */
  public ManageableCurveSnapshot(final Instant valuationTime, final ManageableUnstructuredMarketDataSnapshot values) {
    setValuationTime(valuationTime);
    setValues(values);
  }

  /**
   * Constructs a Fudge message from this object. This builder delegates to {@link ManageableCurveSnapshotBuilder}.
   *
   * @param serializer  the serializer, not null
   * @return  a message
   * @deprecated  use the builder directly
   */
  @Deprecated
  public FudgeMsg toFudgeMsg(final FudgeSerializer serializer) {
    return ManageableCurveSnapshotBuilder.INSTANCE.buildMessage(serializer, this);
  }

  /**
   * Builds a snapshot from a Fudge message. This builder delegates to {@link ManageableCurveSnapshotBuilder}.
   *
   * @param deserializer  the deserializer, not null
   * @param msg  the message, not null
   * @return  a snapshot
   * @deprecated  use the builder directly
   */
  @Deprecated
  public static ManageableCurveSnapshot fromFudgeMsg(final FudgeDeserializer deserializer, final FudgeMsg msg) {
    return ManageableCurveSnapshotBuilder.INSTANCE.buildObject(deserializer, msg);
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ManageableCurveSnapshot}.
   * @return the meta-bean, not null
   */
  public static ManageableCurveSnapshot.Meta meta() {
    return ManageableCurveSnapshot.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ManageableCurveSnapshot.Meta.INSTANCE);
  }

  @Override
  public ManageableCurveSnapshot.Meta metaBean() {
    return ManageableCurveSnapshot.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the valuation instant.
   * @return the value of the property, not null
   */
  @Override
  public Instant getValuationTime() {
    return _valuationTime;
  }

  /**
   * Sets the valuation instant.
   * @param valuationTime  the new value of the property, not null
   */
  public void setValuationTime(Instant valuationTime) {
    JodaBeanUtils.notNull(valuationTime, "valuationTime");
    this._valuationTime = valuationTime;
  }

  /**
   * Gets the the {@code valuationTime} property.
   * @return the property, not null
   */
  public final Property<Instant> valuationTime() {
    return metaBean().valuationTime().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the values.
   * @return the value of the property, not null
   */
  @Override
  public ManageableUnstructuredMarketDataSnapshot getValues() {
    return _values;
  }

  /**
   * Sets the values.
   * @param values  the new value of the property, not null
   */
  public void setValues(ManageableUnstructuredMarketDataSnapshot values) {
    JodaBeanUtils.notNull(values, "values");
    this._values = values;
  }

  /**
   * Gets the the {@code values} property.
   * @return the property, not null
   */
  public final Property<ManageableUnstructuredMarketDataSnapshot> values() {
    return metaBean().values().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public ManageableCurveSnapshot clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ManageableCurveSnapshot other = (ManageableCurveSnapshot) obj;
      return JodaBeanUtils.equal(getValuationTime(), other.getValuationTime()) &&
          JodaBeanUtils.equal(getValues(), other.getValues());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getValuationTime());
    hash = hash * 31 + JodaBeanUtils.hashCode(getValues());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("ManageableCurveSnapshot{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("valuationTime").append('=').append(JodaBeanUtils.toString(getValuationTime())).append(',').append(' ');
    buf.append("values").append('=').append(JodaBeanUtils.toString(getValues())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ManageableCurveSnapshot}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code valuationTime} property.
     */
    private final MetaProperty<Instant> _valuationTime = DirectMetaProperty.ofReadWrite(
        this, "valuationTime", ManageableCurveSnapshot.class, Instant.class);
    /**
     * The meta-property for the {@code values} property.
     */
    private final MetaProperty<ManageableUnstructuredMarketDataSnapshot> _values = DirectMetaProperty.ofReadWrite(
        this, "values", ManageableCurveSnapshot.class, ManageableUnstructuredMarketDataSnapshot.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "valuationTime",
        "values");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 113591406:  // valuationTime
          return _valuationTime;
        case -823812830:  // values
          return _values;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ManageableCurveSnapshot> builder() {
      return new DirectBeanBuilder<ManageableCurveSnapshot>(new ManageableCurveSnapshot());
    }

    @Override
    public Class<? extends ManageableCurveSnapshot> beanType() {
      return ManageableCurveSnapshot.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code valuationTime} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> valuationTime() {
      return _valuationTime;
    }

    /**
     * The meta-property for the {@code values} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ManageableUnstructuredMarketDataSnapshot> values() {
      return _values;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 113591406:  // valuationTime
          return ((ManageableCurveSnapshot) bean).getValuationTime();
        case -823812830:  // values
          return ((ManageableCurveSnapshot) bean).getValues();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 113591406:  // valuationTime
          ((ManageableCurveSnapshot) bean).setValuationTime((Instant) newValue);
          return;
        case -823812830:  // values
          ((ManageableCurveSnapshot) bean).setValues((ManageableUnstructuredMarketDataSnapshot) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((ManageableCurveSnapshot) bean)._valuationTime, "valuationTime");
      JodaBeanUtils.notNull(((ManageableCurveSnapshot) bean)._values, "values");
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
