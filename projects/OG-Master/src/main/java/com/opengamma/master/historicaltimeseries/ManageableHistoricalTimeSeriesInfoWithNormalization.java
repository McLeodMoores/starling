/**
 * Copyright (C) 2015-Present McLeod Moores Software Limited.  All rights reserved.
 */
package com.opengamma.master.historicaltimeseries;

import java.math.BigDecimal;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 *
 */
@BeanDefinition
public class ManageableHistoricalTimeSeriesInfoWithNormalization extends ManageableHistoricalTimeSeriesInfo {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The normalization factor.
   */
  @PropertyDefinition(validate = "notNull")
  private BigDecimal _normalizationFactor = BigDecimal.ONE;

  /**
   * Creates an instance.
   */
  public ManageableHistoricalTimeSeriesInfoWithNormalization() {
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ManageableHistoricalTimeSeriesInfoWithNormalization}.
   * @return the meta-bean, not null
   */
  public static ManageableHistoricalTimeSeriesInfoWithNormalization.Meta meta() {
    return ManageableHistoricalTimeSeriesInfoWithNormalization.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ManageableHistoricalTimeSeriesInfoWithNormalization.Meta.INSTANCE);
  }

  @Override
  public ManageableHistoricalTimeSeriesInfoWithNormalization.Meta metaBean() {
    return ManageableHistoricalTimeSeriesInfoWithNormalization.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the normalization factor.
   * @return the value of the property, not null
   */
  public BigDecimal getNormalizationFactor() {
    return _normalizationFactor;
  }

  /**
   * Sets the normalization factor.
   * @param normalizationFactor  the new value of the property, not null
   */
  public void setNormalizationFactor(BigDecimal normalizationFactor) {
    JodaBeanUtils.notNull(normalizationFactor, "normalizationFactor");
    this._normalizationFactor = normalizationFactor;
  }

  /**
   * Gets the the {@code normalizationFactor} property.
   * @return the property, not null
   */
  public final Property<BigDecimal> normalizationFactor() {
    return metaBean().normalizationFactor().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public ManageableHistoricalTimeSeriesInfoWithNormalization clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ManageableHistoricalTimeSeriesInfoWithNormalization other = (ManageableHistoricalTimeSeriesInfoWithNormalization) obj;
      return JodaBeanUtils.equal(getNormalizationFactor(), other.getNormalizationFactor()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash = hash * 31 + JodaBeanUtils.hashCode(getNormalizationFactor());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("ManageableHistoricalTimeSeriesInfoWithNormalization{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("normalizationFactor").append('=').append(JodaBeanUtils.toString(getNormalizationFactor())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ManageableHistoricalTimeSeriesInfoWithNormalization}.
   */
  public static class Meta extends ManageableHistoricalTimeSeriesInfo.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code normalizationFactor} property.
     */
    private final MetaProperty<BigDecimal> _normalizationFactor = DirectMetaProperty.ofReadWrite(
        this, "normalizationFactor", ManageableHistoricalTimeSeriesInfoWithNormalization.class, BigDecimal.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "normalizationFactor");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1814331060:  // normalizationFactor
          return _normalizationFactor;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ManageableHistoricalTimeSeriesInfoWithNormalization> builder() {
      return new DirectBeanBuilder<ManageableHistoricalTimeSeriesInfoWithNormalization>(new ManageableHistoricalTimeSeriesInfoWithNormalization());
    }

    @Override
    public Class<? extends ManageableHistoricalTimeSeriesInfoWithNormalization> beanType() {
      return ManageableHistoricalTimeSeriesInfoWithNormalization.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code normalizationFactor} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<BigDecimal> normalizationFactor() {
      return _normalizationFactor;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1814331060:  // normalizationFactor
          return ((ManageableHistoricalTimeSeriesInfoWithNormalization) bean).getNormalizationFactor();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1814331060:  // normalizationFactor
          ((ManageableHistoricalTimeSeriesInfoWithNormalization) bean).setNormalizationFactor((BigDecimal) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((ManageableHistoricalTimeSeriesInfoWithNormalization) bean)._normalizationFactor, "normalizationFactor");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
