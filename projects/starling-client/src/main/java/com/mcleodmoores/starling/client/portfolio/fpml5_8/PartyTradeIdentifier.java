/**
 * Copyright (C) 2016 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.starling.client.portfolio.fpml5_8;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.core.position.Counterparty;
import com.opengamma.id.ExternalId;

/**
 * An object containing information about a party that has entered into a trade and the identifier of that trade.
 */
@BeanDefinition
public class PartyTradeIdentifier implements ImmutableBean {

  /**
   * The counterparty.
   */
  @PropertyDefinition(validate = "notNull")
  private final Counterparty _party;

  /**
   * The trade id.
   */
  @PropertyDefinition(validate = "notNull")
  private final ExternalId _tradeId;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code PartyTradeIdentifier}.
   * @return the meta-bean, not null
   */
  public static PartyTradeIdentifier.Meta meta() {
    return PartyTradeIdentifier.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(PartyTradeIdentifier.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static PartyTradeIdentifier.Builder builder() {
    return new PartyTradeIdentifier.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected PartyTradeIdentifier(PartyTradeIdentifier.Builder builder) {
    JodaBeanUtils.notNull(builder._party, "party");
    JodaBeanUtils.notNull(builder._tradeId, "tradeId");
    this._party = builder._party;
    this._tradeId = builder._tradeId;
  }

  @Override
  public PartyTradeIdentifier.Meta metaBean() {
    return PartyTradeIdentifier.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the counterparty.
   * @return the value of the property, not null
   */
  public Counterparty getParty() {
    return _party;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the trade id.
   * @return the value of the property, not null
   */
  public ExternalId getTradeId() {
    return _tradeId;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      PartyTradeIdentifier other = (PartyTradeIdentifier) obj;
      return JodaBeanUtils.equal(getParty(), other.getParty()) &&
          JodaBeanUtils.equal(getTradeId(), other.getTradeId());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getParty());
    hash = hash * 31 + JodaBeanUtils.hashCode(getTradeId());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("PartyTradeIdentifier{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("party").append('=').append(JodaBeanUtils.toString(getParty())).append(',').append(' ');
    buf.append("tradeId").append('=').append(JodaBeanUtils.toString(getTradeId())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PartyTradeIdentifier}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code party} property.
     */
    private final MetaProperty<Counterparty> _party = DirectMetaProperty.ofImmutable(
        this, "party", PartyTradeIdentifier.class, Counterparty.class);
    /**
     * The meta-property for the {@code tradeId} property.
     */
    private final MetaProperty<ExternalId> _tradeId = DirectMetaProperty.ofImmutable(
        this, "tradeId", PartyTradeIdentifier.class, ExternalId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "party",
        "tradeId");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 106437350:  // party
          return _party;
        case -1067372129:  // tradeId
          return _tradeId;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public PartyTradeIdentifier.Builder builder() {
      return new PartyTradeIdentifier.Builder();
    }

    @Override
    public Class<? extends PartyTradeIdentifier> beanType() {
      return PartyTradeIdentifier.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code party} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Counterparty> party() {
      return _party;
    }

    /**
     * The meta-property for the {@code tradeId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> tradeId() {
      return _tradeId;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 106437350:  // party
          return ((PartyTradeIdentifier) bean).getParty();
        case -1067372129:  // tradeId
          return ((PartyTradeIdentifier) bean).getTradeId();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code PartyTradeIdentifier}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<PartyTradeIdentifier> {

    private Counterparty _party;
    private ExternalId _tradeId;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(PartyTradeIdentifier beanToCopy) {
      this._party = beanToCopy.getParty();
      this._tradeId = beanToCopy.getTradeId();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 106437350:  // party
          return _party;
        case -1067372129:  // tradeId
          return _tradeId;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 106437350:  // party
          this._party = (Counterparty) newValue;
          break;
        case -1067372129:  // tradeId
          this._tradeId = (ExternalId) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public PartyTradeIdentifier build() {
      return new PartyTradeIdentifier(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the counterparty.
     * @param party  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder party(Counterparty party) {
      JodaBeanUtils.notNull(party, "party");
      this._party = party;
      return this;
    }

    /**
     * Sets the trade id.
     * @param tradeId  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder tradeId(ExternalId tradeId) {
      JodaBeanUtils.notNull(tradeId, "tradeId");
      this._tradeId = tradeId;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("PartyTradeIdentifier.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("party").append('=').append(JodaBeanUtils.toString(_party)).append(',').append(' ');
      buf.append("tradeId").append('=').append(JodaBeanUtils.toString(_tradeId)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
