/**
 * Copyright (C) 2016 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.starling.client.portfolio.fpml5_8;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableValidator;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.util.money.Currency;

/**
 * An object containing information about the settlement for a non-deliverable FX trade; the settlement currency and
 * the fixing rate. The settlement currency must be one of the currencies referenced in the fixing.
 */
@BeanDefinition
public class NonDeliverableSettlement implements ImmutableBean {

  /**
   * The settlement currency.
   */
  @PropertyDefinition(validate = "notNull")
  private final Currency _settlementCurrency;

  /**
   * The fixing information.
   */
  @PropertyDefinition(validate = "notNull")
  private final FxFixing _fixing;

  /**
   * Checks that the settlement currency is one of the currencies in the fixing.
   */
  @ImmutableValidator
  private void validate() {
    if (!(_fixing.getQuotedCurrencyPair().getCurrency1().equals(_settlementCurrency)
        || _fixing.getQuotedCurrencyPair().getCurrency2().equals(_settlementCurrency))) {
      throw new IllegalStateException("Settlement currency " + _settlementCurrency + " not referenced in fixing: " + _fixing.getQuotedCurrencyPair());
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code NonDeliverableSettlement}.
   * @return the meta-bean, not null
   */
  public static NonDeliverableSettlement.Meta meta() {
    return NonDeliverableSettlement.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(NonDeliverableSettlement.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static NonDeliverableSettlement.Builder builder() {
    return new NonDeliverableSettlement.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected NonDeliverableSettlement(NonDeliverableSettlement.Builder builder) {
    JodaBeanUtils.notNull(builder._settlementCurrency, "settlementCurrency");
    JodaBeanUtils.notNull(builder._fixing, "fixing");
    this._settlementCurrency = builder._settlementCurrency;
    this._fixing = builder._fixing;
    validate();
  }

  @Override
  public NonDeliverableSettlement.Meta metaBean() {
    return NonDeliverableSettlement.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the settlement currency.
   * @return the value of the property, not null
   */
  public Currency getSettlementCurrency() {
    return _settlementCurrency;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the fixing information.
   * @return the value of the property, not null
   */
  public FxFixing getFixing() {
    return _fixing;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      NonDeliverableSettlement other = (NonDeliverableSettlement) obj;
      return JodaBeanUtils.equal(getSettlementCurrency(), other.getSettlementCurrency()) &&
          JodaBeanUtils.equal(getFixing(), other.getFixing());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getSettlementCurrency());
    hash = hash * 31 + JodaBeanUtils.hashCode(getFixing());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("NonDeliverableSettlement{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("settlementCurrency").append('=').append(JodaBeanUtils.toString(getSettlementCurrency())).append(',').append(' ');
    buf.append("fixing").append('=').append(JodaBeanUtils.toString(getFixing())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code NonDeliverableSettlement}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code settlementCurrency} property.
     */
    private final MetaProperty<Currency> _settlementCurrency = DirectMetaProperty.ofImmutable(
        this, "settlementCurrency", NonDeliverableSettlement.class, Currency.class);
    /**
     * The meta-property for the {@code fixing} property.
     */
    private final MetaProperty<FxFixing> _fixing = DirectMetaProperty.ofImmutable(
        this, "fixing", NonDeliverableSettlement.class, FxFixing.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "settlementCurrency",
        "fixing");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1024875430:  // settlementCurrency
          return _settlementCurrency;
        case -1274144851:  // fixing
          return _fixing;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public NonDeliverableSettlement.Builder builder() {
      return new NonDeliverableSettlement.Builder();
    }

    @Override
    public Class<? extends NonDeliverableSettlement> beanType() {
      return NonDeliverableSettlement.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code settlementCurrency} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Currency> settlementCurrency() {
      return _settlementCurrency;
    }

    /**
     * The meta-property for the {@code fixing} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FxFixing> fixing() {
      return _fixing;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1024875430:  // settlementCurrency
          return ((NonDeliverableSettlement) bean).getSettlementCurrency();
        case -1274144851:  // fixing
          return ((NonDeliverableSettlement) bean).getFixing();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code NonDeliverableSettlement}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<NonDeliverableSettlement> {

    private Currency _settlementCurrency;
    private FxFixing _fixing;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(NonDeliverableSettlement beanToCopy) {
      this._settlementCurrency = beanToCopy.getSettlementCurrency();
      this._fixing = beanToCopy.getFixing();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1024875430:  // settlementCurrency
          return _settlementCurrency;
        case -1274144851:  // fixing
          return _fixing;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1024875430:  // settlementCurrency
          this._settlementCurrency = (Currency) newValue;
          break;
        case -1274144851:  // fixing
          this._fixing = (FxFixing) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public NonDeliverableSettlement build() {
      return new NonDeliverableSettlement(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the settlement currency.
     * @param settlementCurrency  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder settlementCurrency(Currency settlementCurrency) {
      JodaBeanUtils.notNull(settlementCurrency, "settlementCurrency");
      this._settlementCurrency = settlementCurrency;
      return this;
    }

    /**
     * Sets the fixing information.
     * @param fixing  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder fixing(FxFixing fixing) {
      JodaBeanUtils.notNull(fixing, "fixing");
      this._fixing = fixing;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("NonDeliverableSettlement.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("settlementCurrency").append('=').append(JodaBeanUtils.toString(_settlementCurrency)).append(',').append(' ');
      buf.append("fixing").append('=').append(JodaBeanUtils.toString(_fixing)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
