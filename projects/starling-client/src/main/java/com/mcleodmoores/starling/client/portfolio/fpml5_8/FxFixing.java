/**
 * Copyright (C) 2016 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.starling.client.portfolio.fpml5_8;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.LocalDate;

/**
 * Contains the information about an FX fixing rate source for a particular currency pair on a particular date.
 */
@BeanDefinition
public class FxFixing implements ImmutableBean {

  /**
   * The currency pair to be fixed.
   */
  @PropertyDefinition(validate = "notNull")
  private final QuotedCurrencyPair _quotedCurrencyPair;

  /**
   * The fixing date.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate _fixingDate;

  /**
   * The FX spot rate source.
   */
  @PropertyDefinition(validate = "notNull")
  private final FxSpotRateSource _fxSpotRateSource;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FxFixing}.
   * @return the meta-bean, not null
   */
  public static FxFixing.Meta meta() {
    return FxFixing.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FxFixing.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static FxFixing.Builder builder() {
    return new FxFixing.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected FxFixing(FxFixing.Builder builder) {
    JodaBeanUtils.notNull(builder._quotedCurrencyPair, "quotedCurrencyPair");
    JodaBeanUtils.notNull(builder._fixingDate, "fixingDate");
    JodaBeanUtils.notNull(builder._fxSpotRateSource, "fxSpotRateSource");
    this._quotedCurrencyPair = builder._quotedCurrencyPair;
    this._fixingDate = builder._fixingDate;
    this._fxSpotRateSource = builder._fxSpotRateSource;
  }

  @Override
  public FxFixing.Meta metaBean() {
    return FxFixing.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency pair to be fixed.
   * @return the value of the property, not null
   */
  public QuotedCurrencyPair getQuotedCurrencyPair() {
    return _quotedCurrencyPair;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the fixing date.
   * @return the value of the property, not null
   */
  public LocalDate getFixingDate() {
    return _fixingDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the FX spot rate source.
   * @return the value of the property, not null
   */
  public FxSpotRateSource getFxSpotRateSource() {
    return _fxSpotRateSource;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FxFixing other = (FxFixing) obj;
      return JodaBeanUtils.equal(getQuotedCurrencyPair(), other.getQuotedCurrencyPair()) &&
          JodaBeanUtils.equal(getFixingDate(), other.getFixingDate()) &&
          JodaBeanUtils.equal(getFxSpotRateSource(), other.getFxSpotRateSource());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getQuotedCurrencyPair());
    hash = hash * 31 + JodaBeanUtils.hashCode(getFixingDate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getFxSpotRateSource());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("FxFixing{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("quotedCurrencyPair").append('=').append(JodaBeanUtils.toString(getQuotedCurrencyPair())).append(',').append(' ');
    buf.append("fixingDate").append('=').append(JodaBeanUtils.toString(getFixingDate())).append(',').append(' ');
    buf.append("fxSpotRateSource").append('=').append(JodaBeanUtils.toString(getFxSpotRateSource())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FxFixing}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code quotedCurrencyPair} property.
     */
    private final MetaProperty<QuotedCurrencyPair> _quotedCurrencyPair = DirectMetaProperty.ofImmutable(
        this, "quotedCurrencyPair", FxFixing.class, QuotedCurrencyPair.class);
    /**
     * The meta-property for the {@code fixingDate} property.
     */
    private final MetaProperty<LocalDate> _fixingDate = DirectMetaProperty.ofImmutable(
        this, "fixingDate", FxFixing.class, LocalDate.class);
    /**
     * The meta-property for the {@code fxSpotRateSource} property.
     */
    private final MetaProperty<FxSpotRateSource> _fxSpotRateSource = DirectMetaProperty.ofImmutable(
        this, "fxSpotRateSource", FxFixing.class, FxSpotRateSource.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "quotedCurrencyPair",
        "fixingDate",
        "fxSpotRateSource");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1256824813:  // quotedCurrencyPair
          return _quotedCurrencyPair;
        case 1255202043:  // fixingDate
          return _fixingDate;
        case 1394767151:  // fxSpotRateSource
          return _fxSpotRateSource;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public FxFixing.Builder builder() {
      return new FxFixing.Builder();
    }

    @Override
    public Class<? extends FxFixing> beanType() {
      return FxFixing.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code quotedCurrencyPair} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<QuotedCurrencyPair> quotedCurrencyPair() {
      return _quotedCurrencyPair;
    }

    /**
     * The meta-property for the {@code fixingDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> fixingDate() {
      return _fixingDate;
    }

    /**
     * The meta-property for the {@code fxSpotRateSource} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FxSpotRateSource> fxSpotRateSource() {
      return _fxSpotRateSource;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1256824813:  // quotedCurrencyPair
          return ((FxFixing) bean).getQuotedCurrencyPair();
        case 1255202043:  // fixingDate
          return ((FxFixing) bean).getFixingDate();
        case 1394767151:  // fxSpotRateSource
          return ((FxFixing) bean).getFxSpotRateSource();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FxFixing}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<FxFixing> {

    private QuotedCurrencyPair _quotedCurrencyPair;
    private LocalDate _fixingDate;
    private FxSpotRateSource _fxSpotRateSource;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(FxFixing beanToCopy) {
      this._quotedCurrencyPair = beanToCopy.getQuotedCurrencyPair();
      this._fixingDate = beanToCopy.getFixingDate();
      this._fxSpotRateSource = beanToCopy.getFxSpotRateSource();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1256824813:  // quotedCurrencyPair
          return _quotedCurrencyPair;
        case 1255202043:  // fixingDate
          return _fixingDate;
        case 1394767151:  // fxSpotRateSource
          return _fxSpotRateSource;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1256824813:  // quotedCurrencyPair
          this._quotedCurrencyPair = (QuotedCurrencyPair) newValue;
          break;
        case 1255202043:  // fixingDate
          this._fixingDate = (LocalDate) newValue;
          break;
        case 1394767151:  // fxSpotRateSource
          this._fxSpotRateSource = (FxSpotRateSource) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FxFixing build() {
      return new FxFixing(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the currency pair to be fixed.
     * @param quotedCurrencyPair  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder quotedCurrencyPair(QuotedCurrencyPair quotedCurrencyPair) {
      JodaBeanUtils.notNull(quotedCurrencyPair, "quotedCurrencyPair");
      this._quotedCurrencyPair = quotedCurrencyPair;
      return this;
    }

    /**
     * Sets the fixing date.
     * @param fixingDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder fixingDate(LocalDate fixingDate) {
      JodaBeanUtils.notNull(fixingDate, "fixingDate");
      this._fixingDate = fixingDate;
      return this;
    }

    /**
     * Sets the FX spot rate source.
     * @param fxSpotRateSource  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder fxSpotRateSource(FxSpotRateSource fxSpotRateSource) {
      JodaBeanUtils.notNull(fxSpotRateSource, "fxSpotRateSource");
      this._fxSpotRateSource = fxSpotRateSource;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("FxFixing.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("quotedCurrencyPair").append('=').append(JodaBeanUtils.toString(_quotedCurrencyPair)).append(',').append(' ');
      buf.append("fixingDate").append('=').append(JodaBeanUtils.toString(_fixingDate)).append(',').append(' ');
      buf.append("fxSpotRateSource").append('=').append(JodaBeanUtils.toString(_fxSpotRateSource)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
