/**
 * Copyright (C) 2016 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.starling.client.portfolio.fpml5_8;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.mcleodmoores.starling.client.marketdata.DataSource;

/**
 * Defines a source for a particular market rate e.g. an FX quote. Contains information about the data source and the
 * page on which the data can be found.
 */
@BeanDefinition
public class PrimaryRateSource implements ImmutableBean {

  /**
   * The data source.
   */
  @PropertyDefinition(validate = "notNull")
  private final DataSource _dataSource;

  /**
   * The page where the data can be found.
   */
  @PropertyDefinition(validate = "notNull")
  private final String _rateSourcePage;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code PrimaryRateSource}.
   * @return the meta-bean, not null
   */
  public static PrimaryRateSource.Meta meta() {
    return PrimaryRateSource.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(PrimaryRateSource.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static PrimaryRateSource.Builder builder() {
    return new PrimaryRateSource.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected PrimaryRateSource(PrimaryRateSource.Builder builder) {
    JodaBeanUtils.notNull(builder._dataSource, "dataSource");
    JodaBeanUtils.notNull(builder._rateSourcePage, "rateSourcePage");
    this._dataSource = builder._dataSource;
    this._rateSourcePage = builder._rateSourcePage;
  }

  @Override
  public PrimaryRateSource.Meta metaBean() {
    return PrimaryRateSource.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the data source.
   * @return the value of the property, not null
   */
  public DataSource getDataSource() {
    return _dataSource;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the page where the data can be found.
   * @return the value of the property, not null
   */
  public String getRateSourcePage() {
    return _rateSourcePage;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      PrimaryRateSource other = (PrimaryRateSource) obj;
      return JodaBeanUtils.equal(getDataSource(), other.getDataSource()) &&
          JodaBeanUtils.equal(getRateSourcePage(), other.getRateSourcePage());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getDataSource());
    hash = hash * 31 + JodaBeanUtils.hashCode(getRateSourcePage());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("PrimaryRateSource{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("dataSource").append('=').append(JodaBeanUtils.toString(getDataSource())).append(',').append(' ');
    buf.append("rateSourcePage").append('=').append(JodaBeanUtils.toString(getRateSourcePage())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PrimaryRateSource}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code dataSource} property.
     */
    private final MetaProperty<DataSource> _dataSource = DirectMetaProperty.ofImmutable(
        this, "dataSource", PrimaryRateSource.class, DataSource.class);
    /**
     * The meta-property for the {@code rateSourcePage} property.
     */
    private final MetaProperty<String> _rateSourcePage = DirectMetaProperty.ofImmutable(
        this, "rateSourcePage", PrimaryRateSource.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "dataSource",
        "rateSourcePage");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1272470629:  // dataSource
          return _dataSource;
        case 1672694346:  // rateSourcePage
          return _rateSourcePage;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public PrimaryRateSource.Builder builder() {
      return new PrimaryRateSource.Builder();
    }

    @Override
    public Class<? extends PrimaryRateSource> beanType() {
      return PrimaryRateSource.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code dataSource} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<DataSource> dataSource() {
      return _dataSource;
    }

    /**
     * The meta-property for the {@code rateSourcePage} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> rateSourcePage() {
      return _rateSourcePage;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1272470629:  // dataSource
          return ((PrimaryRateSource) bean).getDataSource();
        case 1672694346:  // rateSourcePage
          return ((PrimaryRateSource) bean).getRateSourcePage();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code PrimaryRateSource}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<PrimaryRateSource> {

    private DataSource _dataSource;
    private String _rateSourcePage;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(PrimaryRateSource beanToCopy) {
      this._dataSource = beanToCopy.getDataSource();
      this._rateSourcePage = beanToCopy.getRateSourcePage();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1272470629:  // dataSource
          return _dataSource;
        case 1672694346:  // rateSourcePage
          return _rateSourcePage;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1272470629:  // dataSource
          this._dataSource = (DataSource) newValue;
          break;
        case 1672694346:  // rateSourcePage
          this._rateSourcePage = (String) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public PrimaryRateSource build() {
      return new PrimaryRateSource(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the data source.
     * @param dataSource  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder dataSource(DataSource dataSource) {
      JodaBeanUtils.notNull(dataSource, "dataSource");
      this._dataSource = dataSource;
      return this;
    }

    /**
     * Sets the page where the data can be found.
     * @param rateSourcePage  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder rateSourcePage(String rateSourcePage) {
      JodaBeanUtils.notNull(rateSourcePage, "rateSourcePage");
      this._rateSourcePage = rateSourcePage;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("PrimaryRateSource.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("dataSource").append('=').append(JodaBeanUtils.toString(_dataSource)).append(',').append(' ');
      buf.append("rateSourcePage").append('=').append(JodaBeanUtils.toString(_rateSourcePage)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
