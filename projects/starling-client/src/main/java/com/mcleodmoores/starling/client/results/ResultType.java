/**
 * Copyright (C) 2015 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.starling.client.results;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutablePreBuild;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.engine.value.ValueProperties;
import com.opengamma.engine.value.ValueRequirementNames;

/**
 * Wrapper for value requirement names and any value properties to make them type-safe and add meta-data.
 * The difference between this key and {@link ResultKey} is that only exact matches are .equals(), whereas
 * ResultKey is looser, treating value properties that satisfy each other (subsets) as equal for
 * the purposes of result lookup.  This means that all of the properties in a given result aren't required
 * to be known in advance before the result can be retrieved, although some properties may need to be specified
 * to get a unique hit.
 */
@BeanDefinition
public final class ResultType implements ImmutableBean {
  /**
   * Present Value expressed in multiple currencies.
   */
  public static final ResultType FX_PRESENT_VALUE = ResultType.builder().valueRequirementName(ValueRequirementNames.FX_PRESENT_VALUE).build();
  /**
   * PV01 divided into buckets for each curve node.
   */
  public static final ResultType BUCKETED_PV01 = ResultType.builder().valueRequirementName(ValueRequirementNames.BUCKETED_PV01).build();

  /**
   * The value requirement name.
   */
  @PropertyDefinition(validate = "notNull")
  private final String _valueRequirementName;
  /**
   * The value properties.
   */
  @PropertyDefinition(validate = "notNull")
  private final ValueProperties _properties;

  // CHECKSTYLE:OFF
  @ImmutablePreBuild
  private static void preBuild(Builder builder) {
    if (builder.get(Meta.INSTANCE.properties()) == null) {
      builder.properties(ValueProperties.none());
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ResultType}.
   * @return the meta-bean, not null
   */
  public static ResultType.Meta meta() {
    return ResultType.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ResultType.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ResultType.Builder builder() {
    return new ResultType.Builder();
  }

  private ResultType(
      final String valueRequirementName,
      final ValueProperties properties) {
    JodaBeanUtils.notNull(valueRequirementName, "valueRequirementName");
    JodaBeanUtils.notNull(properties, "properties");
    this._valueRequirementName = valueRequirementName;
    this._properties = properties;
  }

  @Override
  public ResultType.Meta metaBean() {
    return ResultType.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(final String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the value requirement name.
   * @return the value of the property, not null
   */
  public String getValueRequirementName() {
    return _valueRequirementName;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the value properties.
   * @return the value of the property, not null
   */
  public ValueProperties getProperties() {
    return _properties;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      final ResultType other = (ResultType) obj;
      return JodaBeanUtils.equal(getValueRequirementName(), other.getValueRequirementName()) &&
          JodaBeanUtils.equal(getProperties(), other.getProperties());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getValueRequirementName());
    hash = hash * 31 + JodaBeanUtils.hashCode(getProperties());
    return hash;
  }

  @Override
  public String toString() {
    final StringBuilder buf = new StringBuilder(96);
    buf.append("ResultType{");
    buf.append("valueRequirementName").append('=').append(getValueRequirementName()).append(',').append(' ');
    buf.append("properties").append('=').append(JodaBeanUtils.toString(getProperties()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ResultType}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code valueRequirementName} property.
     */
    private final MetaProperty<String> _valueRequirementName = DirectMetaProperty.ofImmutable(
        this, "valueRequirementName", ResultType.class, String.class);
    /**
     * The meta-property for the {@code properties} property.
     */
    private final MetaProperty<ValueProperties> _properties = DirectMetaProperty.ofImmutable(
        this, "properties", ResultType.class, ValueProperties.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "valueRequirementName",
        "properties");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(final String propertyName) {
      switch (propertyName.hashCode()) {
        case 1646585789:  // valueRequirementName
          return _valueRequirementName;
        case -926053069:  // properties
          return _properties;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ResultType.Builder builder() {
      return new ResultType.Builder();
    }

    @Override
    public Class<? extends ResultType> beanType() {
      return ResultType.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code valueRequirementName} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> valueRequirementName() {
      return _valueRequirementName;
    }

    /**
     * The meta-property for the {@code properties} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ValueProperties> properties() {
      return _properties;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(final Bean bean, final String propertyName, final boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1646585789:  // valueRequirementName
          return ((ResultType) bean).getValueRequirementName();
        case -926053069:  // properties
          return ((ResultType) bean).getProperties();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(final Bean bean, final String propertyName, final Object newValue, final boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ResultType}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<ResultType> {

    private String _valueRequirementName;
    private ValueProperties _properties;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(final ResultType beanToCopy) {
      this._valueRequirementName = beanToCopy.getValueRequirementName();
      this._properties = beanToCopy.getProperties();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(final String propertyName) {
      switch (propertyName.hashCode()) {
        case 1646585789:  // valueRequirementName
          return _valueRequirementName;
        case -926053069:  // properties
          return _properties;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(final String propertyName, final Object newValue) {
      switch (propertyName.hashCode()) {
        case 1646585789:  // valueRequirementName
          this._valueRequirementName = (String) newValue;
          break;
        case -926053069:  // properties
          this._properties = (ValueProperties) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(final MetaProperty<?> property, final Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(final String propertyName, final String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(final MetaProperty<?> property, final String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(final Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ResultType build() {
      preBuild(this);
      return new ResultType(
          _valueRequirementName,
          _properties);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the value requirement name.
     * @param valueRequirementName  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder valueRequirementName(final String valueRequirementName) {
      JodaBeanUtils.notNull(valueRequirementName, "valueRequirementName");
      this._valueRequirementName = valueRequirementName;
      return this;
    }

    /**
     * Sets the value properties.
     * @param properties  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder properties(final ValueProperties properties) {
      JodaBeanUtils.notNull(properties, "properties");
      this._properties = properties;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      final StringBuilder buf = new StringBuilder(96);
      buf.append("ResultType.Builder{");
      buf.append("valueRequirementName").append('=').append(JodaBeanUtils.toString(_valueRequirementName)).append(',').append(' ');
      buf.append("properties").append('=').append(JodaBeanUtils.toString(_properties));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
