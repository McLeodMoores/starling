/**
 * Copyright (C) 2016 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.starling.client.portfolio.fpml5_8;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableValidator;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.core.position.Counterparty;

/**
 * An object containing information about a payment made by one entity to another. At least one of the payer / receiver references
 * must be set, and the references must be different.
 */
@BeanDefinition
public class ExchangedCurrency implements ImmutableBean {

  /**
   * The payer reference.
   */
  @PropertyDefinition
  private final Counterparty _payerPartyReference;

  /**
   * The receiver reference.
   */
  @PropertyDefinition
  private final Counterparty _receiverPartyReference;

  /**
   * The amount to be paid by the payer to the receiver.
   */
  @PropertyDefinition(validate = "notNull")
  private final PaymentAmount _paymentAmount;

  /**
   * Checks that either the payer or receiver reference is set and that
   */
  @ImmutableValidator
  private void validate() {
    if (_payerPartyReference == null && _receiverPartyReference == null) {
      throw new IllegalArgumentException("Must have a payer or receiver reference");
    }
    if (Objects.equals(_payerPartyReference, _receiverPartyReference)) {
      throw new IllegalArgumentException("Payer and receiver reference were the same");
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ExchangedCurrency}.
   * @return the meta-bean, not null
   */
  public static ExchangedCurrency.Meta meta() {
    return ExchangedCurrency.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ExchangedCurrency.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ExchangedCurrency.Builder builder() {
    return new ExchangedCurrency.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected ExchangedCurrency(ExchangedCurrency.Builder builder) {
    JodaBeanUtils.notNull(builder._paymentAmount, "paymentAmount");
    this._payerPartyReference = builder._payerPartyReference;
    this._receiverPartyReference = builder._receiverPartyReference;
    this._paymentAmount = builder._paymentAmount;
    validate();
  }

  @Override
  public ExchangedCurrency.Meta metaBean() {
    return ExchangedCurrency.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the payer reference.
   * @return the value of the property
   */
  public Counterparty getPayerPartyReference() {
    return _payerPartyReference;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the receiver reference.
   * @return the value of the property
   */
  public Counterparty getReceiverPartyReference() {
    return _receiverPartyReference;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the amount to be paid by the payer to the receiver.
   * @return the value of the property, not null
   */
  public PaymentAmount getPaymentAmount() {
    return _paymentAmount;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ExchangedCurrency other = (ExchangedCurrency) obj;
      return JodaBeanUtils.equal(getPayerPartyReference(), other.getPayerPartyReference()) &&
          JodaBeanUtils.equal(getReceiverPartyReference(), other.getReceiverPartyReference()) &&
          JodaBeanUtils.equal(getPaymentAmount(), other.getPaymentAmount());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getPayerPartyReference());
    hash = hash * 31 + JodaBeanUtils.hashCode(getReceiverPartyReference());
    hash = hash * 31 + JodaBeanUtils.hashCode(getPaymentAmount());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("ExchangedCurrency{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("payerPartyReference").append('=').append(JodaBeanUtils.toString(getPayerPartyReference())).append(',').append(' ');
    buf.append("receiverPartyReference").append('=').append(JodaBeanUtils.toString(getReceiverPartyReference())).append(',').append(' ');
    buf.append("paymentAmount").append('=').append(JodaBeanUtils.toString(getPaymentAmount())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ExchangedCurrency}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code payerPartyReference} property.
     */
    private final MetaProperty<Counterparty> _payerPartyReference = DirectMetaProperty.ofImmutable(
        this, "payerPartyReference", ExchangedCurrency.class, Counterparty.class);
    /**
     * The meta-property for the {@code receiverPartyReference} property.
     */
    private final MetaProperty<Counterparty> _receiverPartyReference = DirectMetaProperty.ofImmutable(
        this, "receiverPartyReference", ExchangedCurrency.class, Counterparty.class);
    /**
     * The meta-property for the {@code paymentAmount} property.
     */
    private final MetaProperty<PaymentAmount> _paymentAmount = DirectMetaProperty.ofImmutable(
        this, "paymentAmount", ExchangedCurrency.class, PaymentAmount.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "payerPartyReference",
        "receiverPartyReference",
        "paymentAmount");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 689057210:  // payerPartyReference
          return _payerPartyReference;
        case -120762668:  // receiverPartyReference
          return _receiverPartyReference;
        case 909332990:  // paymentAmount
          return _paymentAmount;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ExchangedCurrency.Builder builder() {
      return new ExchangedCurrency.Builder();
    }

    @Override
    public Class<? extends ExchangedCurrency> beanType() {
      return ExchangedCurrency.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code payerPartyReference} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Counterparty> payerPartyReference() {
      return _payerPartyReference;
    }

    /**
     * The meta-property for the {@code receiverPartyReference} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Counterparty> receiverPartyReference() {
      return _receiverPartyReference;
    }

    /**
     * The meta-property for the {@code paymentAmount} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<PaymentAmount> paymentAmount() {
      return _paymentAmount;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 689057210:  // payerPartyReference
          return ((ExchangedCurrency) bean).getPayerPartyReference();
        case -120762668:  // receiverPartyReference
          return ((ExchangedCurrency) bean).getReceiverPartyReference();
        case 909332990:  // paymentAmount
          return ((ExchangedCurrency) bean).getPaymentAmount();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ExchangedCurrency}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<ExchangedCurrency> {

    private Counterparty _payerPartyReference;
    private Counterparty _receiverPartyReference;
    private PaymentAmount _paymentAmount;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(ExchangedCurrency beanToCopy) {
      this._payerPartyReference = beanToCopy.getPayerPartyReference();
      this._receiverPartyReference = beanToCopy.getReceiverPartyReference();
      this._paymentAmount = beanToCopy.getPaymentAmount();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 689057210:  // payerPartyReference
          return _payerPartyReference;
        case -120762668:  // receiverPartyReference
          return _receiverPartyReference;
        case 909332990:  // paymentAmount
          return _paymentAmount;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 689057210:  // payerPartyReference
          this._payerPartyReference = (Counterparty) newValue;
          break;
        case -120762668:  // receiverPartyReference
          this._receiverPartyReference = (Counterparty) newValue;
          break;
        case 909332990:  // paymentAmount
          this._paymentAmount = (PaymentAmount) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ExchangedCurrency build() {
      return new ExchangedCurrency(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the payer reference.
     * @param payerPartyReference  the new value
     * @return this, for chaining, not null
     */
    public Builder payerPartyReference(Counterparty payerPartyReference) {
      this._payerPartyReference = payerPartyReference;
      return this;
    }

    /**
     * Sets the receiver reference.
     * @param receiverPartyReference  the new value
     * @return this, for chaining, not null
     */
    public Builder receiverPartyReference(Counterparty receiverPartyReference) {
      this._receiverPartyReference = receiverPartyReference;
      return this;
    }

    /**
     * Sets the amount to be paid by the payer to the receiver.
     * @param paymentAmount  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder paymentAmount(PaymentAmount paymentAmount) {
      JodaBeanUtils.notNull(paymentAmount, "paymentAmount");
      this._paymentAmount = paymentAmount;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("ExchangedCurrency.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("payerPartyReference").append('=').append(JodaBeanUtils.toString(_payerPartyReference)).append(',').append(' ');
      buf.append("receiverPartyReference").append('=').append(JodaBeanUtils.toString(_receiverPartyReference)).append(',').append(' ');
      buf.append("paymentAmount").append('=').append(JodaBeanUtils.toString(_paymentAmount)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
