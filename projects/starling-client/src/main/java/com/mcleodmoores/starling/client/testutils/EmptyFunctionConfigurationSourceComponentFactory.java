/**
 * Copyright (C) 2015 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.starling.client.testutils;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.component.factory.source.FunctionConfigurationSourceComponentFactory;
import com.opengamma.core.change.ChangeEvent;
import com.opengamma.engine.function.config.DynamicFunctionConfigurationSource;
import com.opengamma.engine.function.config.FunctionConfigurationBundle;
import com.opengamma.engine.function.config.FunctionConfigurationDefinition;
import com.opengamma.engine.function.config.FunctionConfigurationDefinitionAggregator;
import com.opengamma.engine.function.config.FunctionConfigurationSource;
import com.opengamma.financial.config.ConfigMasterChangeProvider;
import com.opengamma.financial.value.ValueFunctions;
import com.opengamma.financial.view.ViewFunctions;
import com.opengamma.id.VersionCorrection;
import com.opengamma.master.config.ConfigMaster;
import com.opengamma.master.config.impl.MasterConfigSource;

/**
 *
 */
@BeanDefinition
public class EmptyFunctionConfigurationSourceComponentFactory extends FunctionConfigurationSourceComponentFactory {

  @Override
  protected List<FunctionConfigurationSource> initSources() {
    final LinkedList<FunctionConfigurationSource> sources = new LinkedList<>();
    sources.add(ValueFunctions.instance());
    sources.add(ViewFunctions.instance());
    sources.add(new MutableFunctionConfigurationSource(getConfigMaster()));
    return sources;
  }

  private class MutableFunctionConfigurationSource extends DynamicFunctionConfigurationSource {

    private final ConfigMaster _configMaster;

    public MutableFunctionConfigurationSource(final ConfigMaster configMaster) {
      super(ConfigMasterChangeProvider.of(configMaster));
      _configMaster = configMaster;
    }

    @Override
    protected boolean isPropogateEvent(final ChangeEvent event) {
      // TODO: This is a bit heavy handed; we could just watch for the definitions directly referenced
      return FunctionConfigurationDefinition.class.getName().equals(event.getObjectId().getValue());
    }

    @Override
    protected FunctionConfigurationBundle getFunctionConfiguration(final VersionCorrection version) {
      return new FunctionConfigurationDefinitionAggregator(new MasterConfigSource(_configMaster)).aggregate("TEST_FUNCTIONS", version);
    }

  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code EmptyFunctionConfigurationSourceComponentFactory}.
   * @return the meta-bean, not null
   */
  public static EmptyFunctionConfigurationSourceComponentFactory.Meta meta() {
    return EmptyFunctionConfigurationSourceComponentFactory.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(EmptyFunctionConfigurationSourceComponentFactory.Meta.INSTANCE);
  }

  @Override
  public EmptyFunctionConfigurationSourceComponentFactory.Meta metaBean() {
    return EmptyFunctionConfigurationSourceComponentFactory.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  @Override
  public EmptyFunctionConfigurationSourceComponentFactory clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(32);
    buf.append("EmptyFunctionConfigurationSourceComponentFactory{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code EmptyFunctionConfigurationSourceComponentFactory}.
   */
  public static class Meta extends FunctionConfigurationSourceComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap());

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    public BeanBuilder<? extends EmptyFunctionConfigurationSourceComponentFactory> builder() {
      return new DirectBeanBuilder<EmptyFunctionConfigurationSourceComponentFactory>(new EmptyFunctionConfigurationSourceComponentFactory());
    }

    @Override
    public Class<? extends EmptyFunctionConfigurationSourceComponentFactory> beanType() {
      return EmptyFunctionConfigurationSourceComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
