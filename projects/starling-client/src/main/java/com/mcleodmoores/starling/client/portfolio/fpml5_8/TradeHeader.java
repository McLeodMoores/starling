/**
 * Copyright (C) 2016 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.starling.client.portfolio.fpml5_8;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.LocalDate;

/**
 * An object representing a trade header containing counterparty information and the trade date. Setting the second counterparty
 * is not mandatory; in this case, it is assumed that the user's organization is on the other side of the trade.
 */
@BeanDefinition
public class TradeHeader implements ImmutableBean {

  //TODO should the trade ids be the same?
  //TODO if both parties are set, should they be different?
  /**
   * The first party.
   */
  @PropertyDefinition(validate = "notNull")
  private final PartyTradeIdentifier _party1;

  /**
   * The second party, does not need to be set.
   */
  @PropertyDefinition
  private final PartyTradeIdentifier _party2;

  /**
   * The trade date.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate _tradeDate;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code TradeHeader}.
   * @return the meta-bean, not null
   */
  public static TradeHeader.Meta meta() {
    return TradeHeader.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(TradeHeader.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static TradeHeader.Builder builder() {
    return new TradeHeader.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected TradeHeader(TradeHeader.Builder builder) {
    JodaBeanUtils.notNull(builder._party1, "party1");
    JodaBeanUtils.notNull(builder._tradeDate, "tradeDate");
    this._party1 = builder._party1;
    this._party2 = builder._party2;
    this._tradeDate = builder._tradeDate;
  }

  @Override
  public TradeHeader.Meta metaBean() {
    return TradeHeader.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the first party.
   * @return the value of the property, not null
   */
  public PartyTradeIdentifier getParty1() {
    return _party1;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the second party, does not need to be set.
   * @return the value of the property
   */
  public PartyTradeIdentifier getParty2() {
    return _party2;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the trade date.
   * @return the value of the property, not null
   */
  public LocalDate getTradeDate() {
    return _tradeDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      TradeHeader other = (TradeHeader) obj;
      return JodaBeanUtils.equal(getParty1(), other.getParty1()) &&
          JodaBeanUtils.equal(getParty2(), other.getParty2()) &&
          JodaBeanUtils.equal(getTradeDate(), other.getTradeDate());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getParty1());
    hash = hash * 31 + JodaBeanUtils.hashCode(getParty2());
    hash = hash * 31 + JodaBeanUtils.hashCode(getTradeDate());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("TradeHeader{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("party1").append('=').append(JodaBeanUtils.toString(getParty1())).append(',').append(' ');
    buf.append("party2").append('=').append(JodaBeanUtils.toString(getParty2())).append(',').append(' ');
    buf.append("tradeDate").append('=').append(JodaBeanUtils.toString(getTradeDate())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code TradeHeader}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code party1} property.
     */
    private final MetaProperty<PartyTradeIdentifier> _party1 = DirectMetaProperty.ofImmutable(
        this, "party1", TradeHeader.class, PartyTradeIdentifier.class);
    /**
     * The meta-property for the {@code party2} property.
     */
    private final MetaProperty<PartyTradeIdentifier> _party2 = DirectMetaProperty.ofImmutable(
        this, "party2", TradeHeader.class, PartyTradeIdentifier.class);
    /**
     * The meta-property for the {@code tradeDate} property.
     */
    private final MetaProperty<LocalDate> _tradeDate = DirectMetaProperty.ofImmutable(
        this, "tradeDate", TradeHeader.class, LocalDate.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "party1",
        "party2",
        "tradeDate");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -995409397:  // party1
          return _party1;
        case -995409396:  // party2
          return _party2;
        case 752419634:  // tradeDate
          return _tradeDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public TradeHeader.Builder builder() {
      return new TradeHeader.Builder();
    }

    @Override
    public Class<? extends TradeHeader> beanType() {
      return TradeHeader.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code party1} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<PartyTradeIdentifier> party1() {
      return _party1;
    }

    /**
     * The meta-property for the {@code party2} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<PartyTradeIdentifier> party2() {
      return _party2;
    }

    /**
     * The meta-property for the {@code tradeDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> tradeDate() {
      return _tradeDate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -995409397:  // party1
          return ((TradeHeader) bean).getParty1();
        case -995409396:  // party2
          return ((TradeHeader) bean).getParty2();
        case 752419634:  // tradeDate
          return ((TradeHeader) bean).getTradeDate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code TradeHeader}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<TradeHeader> {

    private PartyTradeIdentifier _party1;
    private PartyTradeIdentifier _party2;
    private LocalDate _tradeDate;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(TradeHeader beanToCopy) {
      this._party1 = beanToCopy.getParty1();
      this._party2 = beanToCopy.getParty2();
      this._tradeDate = beanToCopy.getTradeDate();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -995409397:  // party1
          return _party1;
        case -995409396:  // party2
          return _party2;
        case 752419634:  // tradeDate
          return _tradeDate;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -995409397:  // party1
          this._party1 = (PartyTradeIdentifier) newValue;
          break;
        case -995409396:  // party2
          this._party2 = (PartyTradeIdentifier) newValue;
          break;
        case 752419634:  // tradeDate
          this._tradeDate = (LocalDate) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public TradeHeader build() {
      return new TradeHeader(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the first party.
     * @param party1  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder party1(PartyTradeIdentifier party1) {
      JodaBeanUtils.notNull(party1, "party1");
      this._party1 = party1;
      return this;
    }

    /**
     * Sets the second party, does not need to be set.
     * @param party2  the new value
     * @return this, for chaining, not null
     */
    public Builder party2(PartyTradeIdentifier party2) {
      this._party2 = party2;
      return this;
    }

    /**
     * Sets the trade date.
     * @param tradeDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder tradeDate(LocalDate tradeDate) {
      JodaBeanUtils.notNull(tradeDate, "tradeDate");
      this._tradeDate = tradeDate;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("TradeHeader.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("party1").append('=').append(JodaBeanUtils.toString(_party1)).append(',').append(' ');
      buf.append("party2").append('=').append(JodaBeanUtils.toString(_party2)).append(',').append(' ');
      buf.append("tradeDate").append('=').append(JodaBeanUtils.toString(_tradeDate)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
