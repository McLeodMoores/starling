/**
 * Copyright (C) 2016 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.starling.client.portfolio.fpml5_8;

import java.io.Serializable;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.ZonedDateTime;

import com.opengamma.core.position.Counterparty;
import com.opengamma.id.ExternalId;
import com.opengamma.id.MutableUniqueIdentifiable;
import com.opengamma.id.UniqueId;
import com.opengamma.master.position.Deal;

/**
 * A simple mutable implementation of a {@link Deal}.
 */
@BeanDefinition
public class SimpleDeal extends DirectBean implements Deal, MutableUniqueIdentifiable, Serializable {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The unique identifier of the deal.
   */
  @PropertyDefinition
  private UniqueId _uniqueId;

  /**
   * The deal creation timestamp.
   */
  @PropertyDefinition
  private ZonedDateTime _creationTimestamp;

  /**
   * A map from counterparty to trade ids. Can be used to store information about all of the counterparties
   * that is not captured in the {@link com.opengamma.core.position.Trade}.
   */
  @PropertyDefinition
  private Map<Counterparty, ExternalId> _partyTradeIds;

  public static SimpleDeal parse(final String string) {
    final String[] attributes = string.split(",");
    UniqueId uniqueId = null;
    ZonedDateTime creationTimestamp = null;
    for (final String attribute : attributes) {
      final String[] keyValue = attribute.split("=");
      if (keyValue.length == 2) {
        if (keyValue[0].equals(meta()._uniqueId.name())) {
          uniqueId = UniqueId.parse(keyValue[1]);
        } else if (keyValue[0].equals(meta()._creationTimestamp.name())) {
          creationTimestamp = ZonedDateTime.parse(keyValue[1]);
        }
      }
    }
    final SimpleDeal deal = new SimpleDeal();
    deal.setUniqueId(uniqueId);
    deal.setCreationTimestamp(creationTimestamp);
    return deal;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SimpleDeal}.
   * @return the meta-bean, not null
   */
  public static SimpleDeal.Meta meta() {
    return SimpleDeal.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(SimpleDeal.Meta.INSTANCE);
  }

  @Override
  public SimpleDeal.Meta metaBean() {
    return SimpleDeal.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the unique identifier of the deal.
   * @return the value of the property
   */
  public UniqueId getUniqueId() {
    return _uniqueId;
  }

  /**
   * Sets the unique identifier of the deal.
   * @param uniqueId  the new value of the property
   */
  @Override
  public void setUniqueId(final UniqueId uniqueId) {
    this._uniqueId = uniqueId;
  }

  /**
   * Gets the the {@code uniqueId} property.
   * @return the property, not null
   */
  public final Property<UniqueId> uniqueId() {
    return metaBean().uniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the deal creation timestamp.
   * @return the value of the property
   */
  public ZonedDateTime getCreationTimestamp() {
    return _creationTimestamp;
  }

  /**
   * Sets the deal creation timestamp.
   * @param creationTimestamp  the new value of the property
   */
  public void setCreationTimestamp(final ZonedDateTime creationTimestamp) {
    this._creationTimestamp = creationTimestamp;
  }

  /**
   * Gets the the {@code creationTimestamp} property.
   * @return the property, not null
   */
  public final Property<ZonedDateTime> creationTimestamp() {
    return metaBean().creationTimestamp().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public SimpleDeal clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      final SimpleDeal other = (SimpleDeal) obj;
      return JodaBeanUtils.equal(getUniqueId(), other.getUniqueId()) &&
          JodaBeanUtils.equal(getCreationTimestamp(), other.getCreationTimestamp());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getUniqueId());
    hash = hash * 31 + JodaBeanUtils.hashCode(getCreationTimestamp());
    return hash;
  }

  @Override
  public String toString() {
    final StringBuilder buf = new StringBuilder(96);
    buf.append("SimpleDeal{");
    final int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(final StringBuilder buf) {
    buf.append("uniqueId").append('=').append(JodaBeanUtils.toString(getUniqueId())).append(',').append(' ');
    buf.append("creationTimestamp").append('=').append(JodaBeanUtils.toString(getCreationTimestamp())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SimpleDeal}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code uniqueId} property.
     */
    private final MetaProperty<UniqueId> _uniqueId = DirectMetaProperty.ofReadWrite(
        this, "uniqueId", SimpleDeal.class, UniqueId.class);
    /**
     * The meta-property for the {@code creationTimestamp} property.
     */
    private final MetaProperty<ZonedDateTime> _creationTimestamp = DirectMetaProperty.ofReadWrite(
        this, "creationTimestamp", SimpleDeal.class, ZonedDateTime.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "uniqueId",
        "creationTimestamp");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(final String propertyName) {
      switch (propertyName.hashCode()) {
        case -294460212:  // uniqueId
          return _uniqueId;
        case -370203401:  // creationTimestamp
          return _creationTimestamp;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends SimpleDeal> builder() {
      return new DirectBeanBuilder<SimpleDeal>(new SimpleDeal());
    }

    @Override
    public Class<? extends SimpleDeal> beanType() {
      return SimpleDeal.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code uniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueId> uniqueId() {
      return _uniqueId;
    }

    /**
     * The meta-property for the {@code creationTimestamp} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ZonedDateTime> creationTimestamp() {
      return _creationTimestamp;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(final Bean bean, final String propertyName, final boolean quiet) {
      switch (propertyName.hashCode()) {
        case -294460212:  // uniqueId
          return ((SimpleDeal) bean).getUniqueId();
        case -370203401:  // creationTimestamp
          return ((SimpleDeal) bean).getCreationTimestamp();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(final Bean bean, final String propertyName, final Object newValue, final boolean quiet) {
      switch (propertyName.hashCode()) {
        case -294460212:  // uniqueId
          ((SimpleDeal) bean).setUniqueId((UniqueId) newValue);
          return;
        case -370203401:  // creationTimestamp
          ((SimpleDeal) bean).setCreationTimestamp((ZonedDateTime) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
