/**
 * Copyright (C) 2014 - Present McLeod Moores Software Limited.  All rights reserved.
 */
package com.opengamma.master.holiday;

import java.util.Collection;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.LocalDate;

import com.opengamma.core.holiday.Holiday;
import com.opengamma.core.holiday.HolidayType;
import com.opengamma.core.holiday.WeekendType;
import com.opengamma.core.holiday.WeekendTypeProvider;
import com.opengamma.id.ExternalId;
import com.opengamma.util.PublicSPI;
import com.opengamma.util.money.Currency;
import org.joda.beans.MetaBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

/**
 * The manageable implementation of a set of holiday dates.
 * <p>
 * This implementation is used by the holiday master to store the data.
 */
@PublicSPI
@BeanDefinition
public class ManageableHolidayWithWeekend extends ManageableHoliday implements WeekendTypeProvider {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The weekend type.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private WeekendType _weekendType;

  /**
   * Creates an empty instance.
   */
  public ManageableHolidayWithWeekend() {
    super();
  }

  /**
   * Create an instance from another holiday instance.
   * <p>
   * This copies the specified holiday creating an independent copy.
   *
   * @param holiday  the holiday to copy, not null
   * @param weekendType  the weekend type, not null
   */
  public ManageableHolidayWithWeekend(final Holiday holiday, final WeekendType weekendType) {
    super(holiday);
    setWeekendType(weekendType);
  }

  /**
   * Create a CURRENCY holiday from a collection of holiday dates.
   * <p>
   * The unique identifier is managed separately using {@link #setUniqueId}.
   *
   * @param currency  the currency of this CURRENCY holiday schedule, not null
   * @param holidaySeries  the dates on which holidays fall, not null
   * @param weekendType  the weekend type, not null
   */
  public ManageableHolidayWithWeekend(final Currency currency, final Collection<LocalDate> holidaySeries, final WeekendType weekendType) {
    super(currency, holidaySeries);
    setWeekendType(weekendType);
  }


  /**
   * Create a BANK, SETTLEMENT or TRADING holiday from a collection of holiday dates.
   * <p>
   * The unique identifier is managed separately using {@link #setUniqueId}.
   *
   * @param holidayType  the type of the holiday, not null
   * @param regionOrExchangeId  the identifier for either a region (for a BANK holiday) or an exchange (for a SETTLEMENT or TRADING holiday), not null
   * @param holidaySeries  a collection of dates on which holidays fall, not null
   * @param weekendType  the weekend type, not null
   */
  public ManageableHolidayWithWeekend(final HolidayType holidayType, final ExternalId regionOrExchangeId, final Collection<LocalDate> holidaySeries,
      final WeekendType weekendType) {
    super(holidayType, regionOrExchangeId, holidaySeries);
    setWeekendType(weekendType);
  }

  /**
   * Create a CUSTOM holiday from a collection of holiday dates.
   * <p>
   * The unique identifier is managed separately using {@link #setUniqueId}.
   *
   * @param customExternalId  the external id of this holiday schedule, not null
   * @param holidaySeries  the dates on which holidays fall, not null
   * @param weekendType  the weekend type, not null
   */
  public ManageableHolidayWithWeekend(final ExternalId customExternalId, final Collection<LocalDate> holidaySeries, final WeekendType weekendType) {
    super(customExternalId, holidaySeries);
    setWeekendType(weekendType);
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code ManageableHolidayWithWeekend}.
   * @return the meta-bean, not null
   */
  public static ManageableHolidayWithWeekend.Meta meta() {
    return ManageableHolidayWithWeekend.Meta.INSTANCE;
  }

  static {
    MetaBean.register(ManageableHolidayWithWeekend.Meta.INSTANCE);
  }

  @Override
  public ManageableHolidayWithWeekend.Meta metaBean() {
    return ManageableHolidayWithWeekend.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the weekend type.
   * @return the value of the property, not null
   */
  @Override
  public WeekendType getWeekendType() {
    return _weekendType;
  }

  /**
   * Sets the weekend type.
   * @param weekendType  the new value of the property, not null
   */
  public void setWeekendType(WeekendType weekendType) {
    JodaBeanUtils.notNull(weekendType, "weekendType");
    this._weekendType = weekendType;
  }

  /**
   * Gets the the {@code weekendType} property.
   * @return the property, not null
   */
  public final Property<WeekendType> weekendType() {
    return metaBean().weekendType().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public ManageableHolidayWithWeekend clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ManageableHolidayWithWeekend other = (ManageableHolidayWithWeekend) obj;
      return JodaBeanUtils.equal(getWeekendType(), other.getWeekendType()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash = hash * 31 + JodaBeanUtils.hashCode(getWeekendType());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("ManageableHolidayWithWeekend{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("weekendType").append('=').append(JodaBeanUtils.toString(getWeekendType())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ManageableHolidayWithWeekend}.
   */
  public static class Meta extends ManageableHoliday.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code weekendType} property.
     */
    private final MetaProperty<WeekendType> _weekendType = DirectMetaProperty.ofReadWrite(
        this, "weekendType", ManageableHolidayWithWeekend.class, WeekendType.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "weekendType");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 563735617:  // weekendType
          return _weekendType;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ManageableHolidayWithWeekend> builder() {
      return new DirectBeanBuilder<>(new ManageableHolidayWithWeekend());
    }

    @Override
    public Class<? extends ManageableHolidayWithWeekend> beanType() {
      return ManageableHolidayWithWeekend.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code weekendType} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<WeekendType> weekendType() {
      return _weekendType;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 563735617:  // weekendType
          return ((ManageableHolidayWithWeekend) bean).getWeekendType();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 563735617:  // weekendType
          ((ManageableHolidayWithWeekend) bean).setWeekendType((WeekendType) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((ManageableHolidayWithWeekend) bean)._weekendType, "weekendType");
      super.validate(bean);
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
