/**
 * Copyright (C) 2014-Present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.quandl.convention;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.mcleodmoores.quandl.util.ArgumentChecker;
import com.opengamma.core.convention.ConventionType;
import com.opengamma.id.ExternalId;
import com.opengamma.id.ExternalIdBundle;
import com.opengamma.util.money.Currency;
import com.opengamma.util.time.Tenor;

/**
 * Convention for Fed fund futures that contains the necessary meta-data to construct a
 * {@link com.opengamma.financial.security.future.FederalFundsFutureSecurity} from Quandl data.
 */
//TODO think about where currency, tenor and expiry information should go
@BeanDefinition
public class QuandlFedFundsFutureConvention extends QuandlFutureConvention {

  /**
   * The convention type.
   */
  public static final ConventionType TYPE = ConventionType.of("QuandFedFundsFuture");

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The currency.
   */
  @PropertyDefinition
  private final Currency _currency = Currency.USD;

  /**
   * The future tenor.
   */
  @PropertyDefinition
  private final Tenor _tenor = Tenor.ONE_MONTH;

  /**
   * For the builder.
   */
  protected QuandlFedFundsFutureConvention() {
    super();
  }

  /**
   * Creates an instance with the settlement exchange and trading exchange name created by parsing
   * the Quandl code.
   * @param name The name of the convention, not null
   * @param externalIdBundle The ids associated with this convention, not null
   * @param lastTradeTime The last trade time on the expiry date, not null
   * @param zoneOffsetId The time zone id, not null
   * @param unitAmount The unit amount for the future
   * @param underlyingConventionId The id of the underlying index convention, not null
   */
  public QuandlFedFundsFutureConvention(final String name, final ExternalIdBundle externalIdBundle, final String lastTradeTime,
      final String zoneOffsetId, final double unitAmount, final ExternalId underlyingConventionId) {
    super(name, externalIdBundle, lastTradeTime, zoneOffsetId, unitAmount, underlyingConventionId);
  }

  /**
   * Creates an instance.
   * @param name The name of the convention, not null
   * @param externalIdBundle The ids associated with this convention, not null
   * @param lastTradeTime The last trade time on the expiry date, not null
   * @param zoneOffsetId The time zone id, not null
   * @param unitAmount The unit amount for the future
   * @param underlyingConventionId The id of the underlying index convention, not null
   * @param tradingExchange The name of the trading exchange, can be null
   * @param settlementExchange The name of the settlement exchange, can be null
   */
  public QuandlFedFundsFutureConvention(final String name, final ExternalIdBundle externalIdBundle,
      final String lastTradeTime, final String zoneOffsetId, final double unitAmount,
      final ExternalId underlyingConventionId, final String tradingExchange, final String settlementExchange) {
    super(name, externalIdBundle, lastTradeTime, zoneOffsetId, unitAmount, underlyingConventionId, tradingExchange, settlementExchange);
    setLastTradeTime(lastTradeTime);
    setZoneOffsetId(zoneOffsetId);
    setUnitAmount(unitAmount);
    setTradingExchange(tradingExchange);
    setSettlementExchange(settlementExchange);
  }

  @Override
  public ConventionType getConventionType() {
    return TYPE;
  }

  @Override
  public <T> T accept(final QuandlFinancialConventionVisitor<T> visitor) {
    ArgumentChecker.notNull(visitor, "visitor");
    return visitor.visitQuandlFedFundsFutureConvention(this);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code QuandlFedFundsFutureConvention}.
   * @return the meta-bean, not null
   */
  public static QuandlFedFundsFutureConvention.Meta meta() {
    return QuandlFedFundsFutureConvention.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(QuandlFedFundsFutureConvention.Meta.INSTANCE);
  }

  @Override
  public QuandlFedFundsFutureConvention.Meta metaBean() {
    return QuandlFedFundsFutureConvention.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency.
   * @return the value of the property, not null
   */
  public Currency getCurrency() {
    return _currency;
  }

  /**
   * Gets the the {@code currency} property.
   * @return the property, not null
   */
  public final Property<Currency> currency() {
    return metaBean().currency().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the future tenor.
   * @return the value of the property, not null
   */
  public Tenor getTenor() {
    return _tenor;
  }

  /**
   * Gets the the {@code tenor} property.
   * @return the property, not null
   */
  public final Property<Tenor> tenor() {
    return metaBean().tenor().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public QuandlFedFundsFutureConvention clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      QuandlFedFundsFutureConvention other = (QuandlFedFundsFutureConvention) obj;
      return JodaBeanUtils.equal(getCurrency(), other.getCurrency()) &&
          JodaBeanUtils.equal(getTenor(), other.getTenor()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurrency());
    hash = hash * 31 + JodaBeanUtils.hashCode(getTenor());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("QuandlFedFundsFutureConvention{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("currency").append('=').append(JodaBeanUtils.toString(getCurrency())).append(',').append(' ');
    buf.append("tenor").append('=').append(JodaBeanUtils.toString(getTenor())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code QuandlFedFundsFutureConvention}.
   */
  public static class Meta extends QuandlFutureConvention.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code currency} property.
     */
    private final MetaProperty<Currency> _currency = DirectMetaProperty.ofReadOnly(
        this, "currency", QuandlFedFundsFutureConvention.class, Currency.class);
    /**
     * The meta-property for the {@code tenor} property.
     */
    private final MetaProperty<Tenor> _tenor = DirectMetaProperty.ofReadOnly(
        this, "tenor", QuandlFedFundsFutureConvention.class, Tenor.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "currency",
        "tenor");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 575402001:  // currency
          return _currency;
        case 110246592:  // tenor
          return _tenor;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends QuandlFedFundsFutureConvention> builder() {
      return new DirectBeanBuilder<QuandlFedFundsFutureConvention>(new QuandlFedFundsFutureConvention());
    }

    @Override
    public Class<? extends QuandlFedFundsFutureConvention> beanType() {
      return QuandlFedFundsFutureConvention.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code currency} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Currency> currency() {
      return _currency;
    }

    /**
     * The meta-property for the {@code tenor} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Tenor> tenor() {
      return _tenor;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 575402001:  // currency
          return ((QuandlFedFundsFutureConvention) bean).getCurrency();
        case 110246592:  // tenor
          return ((QuandlFedFundsFutureConvention) bean).getTenor();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 575402001:  // currency
          if (quiet) {
            return;
          }
          throw new UnsupportedOperationException("Property cannot be written: currency");
        case 110246592:  // tenor
          if (quiet) {
            return;
          }
          throw new UnsupportedOperationException("Property cannot be written: tenor");
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((QuandlFedFundsFutureConvention) bean)._currency, "currency");
      JodaBeanUtils.notNull(((QuandlFedFundsFutureConvention) bean)._tenor, "tenor");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
