/**
 * Copyright (C) 2017 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.analytics.financial.data;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.analytics.financial.forex.method.FXMatrix;
import com.opengamma.analytics.financial.instrument.index.Index;
import com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;
import com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity;
import com.opengamma.id.UniqueIdentifiable;
import com.opengamma.util.money.Currency;
import com.opengamma.util.tuple.DoublesPair;

/**
 *
 */
@BeanDefinition(builderScope = "private")
public class FixedIncomeCurveDataProvider implements FxDataProvider, DiscountingCurveDataProvider, IndexCurveDataProvider, ImmutableBean {
  @PropertyDefinition
  private final Map<UniqueIdentifiable, YieldAndDiscountCurve> _discountingCurves;
  @PropertyDefinition
  private final Map<UniqueIdentifiable, YieldAndDiscountCurve> _overnightCurves;
  @PropertyDefinition
  private final Map<UniqueIdentifiable, YieldAndDiscountCurve> _iborCurves;
  @PropertyDefinition
  private final FXMatrix _fxMatrix;

  @ImmutableConstructor
  FixedIncomeCurveDataProvider(final Map<UniqueIdentifiable, YieldAndDiscountCurve> discountingCurves,
      final Map<UniqueIdentifiable, YieldAndDiscountCurve> overnightCurves,
      final Map<UniqueIdentifiable, YieldAndDiscountCurve> iborCurves,
      final FXMatrix fxMatrix) {
    _discountingCurves = discountingCurves == null
        ? Collections.<UniqueIdentifiable, YieldAndDiscountCurve>emptyMap() : Collections.unmodifiableMap(discountingCurves);
        // TODO etc
    _overnightCurves = Collections.unmodifiableMap(overnightCurves);
    _iborCurves = Collections.unmodifiableMap(iborCurves);
    // copy is not immutable
    _fxMatrix = new FXMatrix(fxMatrix);
  }

  @Override
  public FixedIncomeCurveDataProvider copy() {
    return null;
  }

  @Override
  public double[] parameterSensitivity(final UniqueIdentifiable name, final List<DoublesPair> pointSensitivity) {
    return null;
  }

  @Override
  public Set<String> getAllCurveNames() {
    return null;
  }

  @Override
  public String getCurveNameForId(final UniqueIdentifiable id) {
    return null;
  }

  @Override
  public Set<UniqueIdentifiable> getIdentifiers() {
    return null;
  }

  @Override
  public Set<UniqueIdentifiable> getIdentifiersForScheme(final String scheme) {
    return null;
  }

  @Override
  public double getInvestmentFactor(final Index index, final double startTime,
      final double endTime, final double accrualFactor) {
    return 0;
  }

  @Override
  public double getSimplyCompoundedForwardRate(final Index index, final double startTime,
      final double endTime, final double accrualFactor) {
    return 0;
  }

  @Override
  public double getSimplyCompoundedForwardRate(final Index index, final double startTime,
      final double endTime) {
    return 0;
  }

  @Override
  public double getAnnuallyCompoundedForwardRate(final Index index, final double startTime,
      final double endTime, final double accrualFactor) {
    return 0;
  }

  @Override
  public double getAnnuallyCompoundedForwardRate(final Index index, final double startTime,
      final double endTime) {
    return 0;
  }

  @Override
  public double getDiscountFactor(final UniqueIdentifiable id, final double time) {
    return 0;
  }

  @Override
  public double[] parameterForwardSensitivity(final String name,
      final List<ForwardSensitivity> pointSensitivity) {
    return null;
  }

  @Override
  public double getFxRate(final Currency ccy1, final Currency ccy2) {
    return 0;
  }

  @Override
  public FXMatrix getFxRates() {
    return null;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FixedIncomeCurveDataProvider}.
   * @return the meta-bean, not null
   */
  public static FixedIncomeCurveDataProvider.Meta meta() {
    return FixedIncomeCurveDataProvider.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FixedIncomeCurveDataProvider.Meta.INSTANCE);
  }

  @Override
  public FixedIncomeCurveDataProvider.Meta metaBean() {
    return FixedIncomeCurveDataProvider.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the discountingCurves.
   * @return the value of the property
   */
  public Map<UniqueIdentifiable, YieldAndDiscountCurve> getDiscountingCurves() {
    return _discountingCurves;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the overnightCurves.
   * @return the value of the property
   */
  public Map<UniqueIdentifiable, YieldAndDiscountCurve> getOvernightCurves() {
    return _overnightCurves;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the iborCurves.
   * @return the value of the property
   */
  public Map<UniqueIdentifiable, YieldAndDiscountCurve> getIborCurves() {
    return _iborCurves;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the fxMatrix.
   * @return the value of the property
   */
  public FXMatrix getFxMatrix() {
    return _fxMatrix;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FixedIncomeCurveDataProvider other = (FixedIncomeCurveDataProvider) obj;
      return JodaBeanUtils.equal(getDiscountingCurves(), other.getDiscountingCurves()) &&
          JodaBeanUtils.equal(getOvernightCurves(), other.getOvernightCurves()) &&
          JodaBeanUtils.equal(getIborCurves(), other.getIborCurves()) &&
          JodaBeanUtils.equal(getFxMatrix(), other.getFxMatrix());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getDiscountingCurves());
    hash = hash * 31 + JodaBeanUtils.hashCode(getOvernightCurves());
    hash = hash * 31 + JodaBeanUtils.hashCode(getIborCurves());
    hash = hash * 31 + JodaBeanUtils.hashCode(getFxMatrix());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("FixedIncomeCurveDataProvider{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("discountingCurves").append('=').append(JodaBeanUtils.toString(getDiscountingCurves())).append(',').append(' ');
    buf.append("overnightCurves").append('=').append(JodaBeanUtils.toString(getOvernightCurves())).append(',').append(' ');
    buf.append("iborCurves").append('=').append(JodaBeanUtils.toString(getIborCurves())).append(',').append(' ');
    buf.append("fxMatrix").append('=').append(JodaBeanUtils.toString(getFxMatrix())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FixedIncomeCurveDataProvider}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code discountingCurves} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Map<UniqueIdentifiable, YieldAndDiscountCurve>> _discountingCurves = DirectMetaProperty.ofImmutable(
        this, "discountingCurves", FixedIncomeCurveDataProvider.class, (Class) Map.class);
    /**
     * The meta-property for the {@code overnightCurves} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Map<UniqueIdentifiable, YieldAndDiscountCurve>> _overnightCurves = DirectMetaProperty.ofImmutable(
        this, "overnightCurves", FixedIncomeCurveDataProvider.class, (Class) Map.class);
    /**
     * The meta-property for the {@code iborCurves} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Map<UniqueIdentifiable, YieldAndDiscountCurve>> _iborCurves = DirectMetaProperty.ofImmutable(
        this, "iborCurves", FixedIncomeCurveDataProvider.class, (Class) Map.class);
    /**
     * The meta-property for the {@code fxMatrix} property.
     */
    private final MetaProperty<FXMatrix> _fxMatrix = DirectMetaProperty.ofImmutable(
        this, "fxMatrix", FixedIncomeCurveDataProvider.class, FXMatrix.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "discountingCurves",
        "overnightCurves",
        "iborCurves",
        "fxMatrix");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1937730619:  // discountingCurves
          return _discountingCurves;
        case 299905608:  // overnightCurves
          return _overnightCurves;
        case 108381504:  // iborCurves
          return _iborCurves;
        case -1198118093:  // fxMatrix
          return _fxMatrix;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends FixedIncomeCurveDataProvider> builder() {
      return new FixedIncomeCurveDataProvider.Builder();
    }

    @Override
    public Class<? extends FixedIncomeCurveDataProvider> beanType() {
      return FixedIncomeCurveDataProvider.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code discountingCurves} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Map<UniqueIdentifiable, YieldAndDiscountCurve>> discountingCurves() {
      return _discountingCurves;
    }

    /**
     * The meta-property for the {@code overnightCurves} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Map<UniqueIdentifiable, YieldAndDiscountCurve>> overnightCurves() {
      return _overnightCurves;
    }

    /**
     * The meta-property for the {@code iborCurves} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Map<UniqueIdentifiable, YieldAndDiscountCurve>> iborCurves() {
      return _iborCurves;
    }

    /**
     * The meta-property for the {@code fxMatrix} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FXMatrix> fxMatrix() {
      return _fxMatrix;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1937730619:  // discountingCurves
          return ((FixedIncomeCurveDataProvider) bean).getDiscountingCurves();
        case 299905608:  // overnightCurves
          return ((FixedIncomeCurveDataProvider) bean).getOvernightCurves();
        case 108381504:  // iborCurves
          return ((FixedIncomeCurveDataProvider) bean).getIborCurves();
        case -1198118093:  // fxMatrix
          return ((FixedIncomeCurveDataProvider) bean).getFxMatrix();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FixedIncomeCurveDataProvider}.
   */
  private static class Builder extends DirectFieldsBeanBuilder<FixedIncomeCurveDataProvider> {

    private Map<UniqueIdentifiable, YieldAndDiscountCurve> _discountingCurves;
    private Map<UniqueIdentifiable, YieldAndDiscountCurve> _overnightCurves;
    private Map<UniqueIdentifiable, YieldAndDiscountCurve> _iborCurves;
    private FXMatrix _fxMatrix;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1937730619:  // discountingCurves
          return _discountingCurves;
        case 299905608:  // overnightCurves
          return _overnightCurves;
        case 108381504:  // iborCurves
          return _iborCurves;
        case -1198118093:  // fxMatrix
          return _fxMatrix;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1937730619:  // discountingCurves
          this._discountingCurves = (Map<UniqueIdentifiable, YieldAndDiscountCurve>) newValue;
          break;
        case 299905608:  // overnightCurves
          this._overnightCurves = (Map<UniqueIdentifiable, YieldAndDiscountCurve>) newValue;
          break;
        case 108381504:  // iborCurves
          this._iborCurves = (Map<UniqueIdentifiable, YieldAndDiscountCurve>) newValue;
          break;
        case -1198118093:  // fxMatrix
          this._fxMatrix = (FXMatrix) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FixedIncomeCurveDataProvider build() {
      return new FixedIncomeCurveDataProvider(
          _discountingCurves,
          _overnightCurves,
          _iborCurves,
          _fxMatrix);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("FixedIncomeCurveDataProvider.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("discountingCurves").append('=').append(JodaBeanUtils.toString(_discountingCurves)).append(',').append(' ');
      buf.append("overnightCurves").append('=').append(JodaBeanUtils.toString(_overnightCurves)).append(',').append(' ');
      buf.append("iborCurves").append('=').append(JodaBeanUtils.toString(_iborCurves)).append(',').append(' ');
      buf.append("fxMatrix").append('=').append(JodaBeanUtils.toString(_fxMatrix)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
