/**
 * Copyright (C) 2019 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.financial.function.credit.configs;

import java.io.Serializable;
import java.util.Collection;
import java.util.Map;
import java.util.TreeSet;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.LocalDate;

import com.opengamma.analytics.financial.credit.creditdefaultswap.StandardCDSQuotingConvention;
import com.opengamma.financial.analytics.ircurve.strips.CurveNodeWithIdentifier;
import com.opengamma.util.ArgumentChecker;
import com.opengamma.util.credit.CreditCurveIdentifier;
import org.joda.beans.MetaBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

/**
 * A specification for a credit spread curve that contains the nodes, market data identifiers and information about the type of the quote (e.g. quoted spread,
 * points up-front).
 */
@BeanDefinition
public class CreditCurveSpecification extends DirectBean implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * The name of the curve.
   */
  @PropertyDefinition(validate = "notNull")
  private String _curveName;

  /**
   * The nodes with identifiers.
   */
  @PropertyDefinition(validate = "notNull", set = "manual")
  private Collection<CurveNodeWithIdentifier> _nodes;

  /**
   * The identifier of the specification.
   */
  @PropertyDefinition(validate = "notNull")
  private CreditCurveIdentifier _id;

  /**
   * The curve date.
   */
  @PropertyDefinition(validate = "notNull")
  private LocalDate _curveDate;

  /**
   * The type of the quote.
   */
  @PropertyDefinition(validate = "notNull")
  private StandardCDSQuotingConvention _quoteConvention;

  /**
   * For the builder.
   */
  CreditCurveSpecification() {
  }

  /**
   * @param curveName
   *          the curve name, not null
   * @param curveDate
   *          the curve date, not null
   * @param id
   *          the identifier of the curve, not null
   * @param nodes
   *          the curve nodes, not null
   * @param quoteConvention
   *          the convention of the quotes, not null
   */
  public CreditCurveSpecification(final String curveName, final LocalDate curveDate, final CreditCurveIdentifier id,
      final Collection<CurveNodeWithIdentifier> nodes, final StandardCDSQuotingConvention quoteConvention) {
    setCurveName(curveName);
    setCurveDate(curveDate);
    setId(id);
    setNodes(nodes);
    setQuoteConvention(quoteConvention);
  }

  /**
   * Adds a node to the specification.
   *
   * @param node
   *          the node, not null
   */
  public void addNode(final CurveNodeWithIdentifier node) {
    _nodes.add(ArgumentChecker.notNull(node, "node"));
  }

  /**
   * Sets the nodes with identifiers.
   *
   * @param nodes
   *          the new value of the property, not null
   */
  public void setNodes(final Collection<CurveNodeWithIdentifier> nodes) {
    if (_nodes == null) {
      _nodes = new TreeSet<>();
    } else {
      _nodes.clear();
    }
    _nodes.addAll(nodes);
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code CreditCurveSpecification}.
   * @return the meta-bean, not null
   */
  public static CreditCurveSpecification.Meta meta() {
    return CreditCurveSpecification.Meta.INSTANCE;
  }

  static {
    MetaBean.register(CreditCurveSpecification.Meta.INSTANCE);
  }

  @Override
  public CreditCurveSpecification.Meta metaBean() {
    return CreditCurveSpecification.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name of the curve.
   * @return the value of the property, not null
   */
  public String getCurveName() {
    return _curveName;
  }

  /**
   * Sets the name of the curve.
   * @param curveName  the new value of the property, not null
   */
  public void setCurveName(String curveName) {
    JodaBeanUtils.notNull(curveName, "curveName");
    this._curveName = curveName;
  }

  /**
   * Gets the the {@code curveName} property.
   * @return the property, not null
   */
  public final Property<String> curveName() {
    return metaBean().curveName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the nodes with identifiers.
   * @return the value of the property, not null
   */
  public Collection<CurveNodeWithIdentifier> getNodes() {
    return _nodes;
  }

  /**
   * Gets the the {@code nodes} property.
   * @return the property, not null
   */
  public final Property<Collection<CurveNodeWithIdentifier>> nodes() {
    return metaBean().nodes().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the identifier of the specification.
   * @return the value of the property, not null
   */
  public CreditCurveIdentifier getId() {
    return _id;
  }

  /**
   * Sets the identifier of the specification.
   * @param id  the new value of the property, not null
   */
  public void setId(CreditCurveIdentifier id) {
    JodaBeanUtils.notNull(id, "id");
    this._id = id;
  }

  /**
   * Gets the the {@code id} property.
   * @return the property, not null
   */
  public final Property<CreditCurveIdentifier> id() {
    return metaBean().id().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the curve date.
   * @return the value of the property, not null
   */
  public LocalDate getCurveDate() {
    return _curveDate;
  }

  /**
   * Sets the curve date.
   * @param curveDate  the new value of the property, not null
   */
  public void setCurveDate(LocalDate curveDate) {
    JodaBeanUtils.notNull(curveDate, "curveDate");
    this._curveDate = curveDate;
  }

  /**
   * Gets the the {@code curveDate} property.
   * @return the property, not null
   */
  public final Property<LocalDate> curveDate() {
    return metaBean().curveDate().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the type of the quote.
   * @return the value of the property, not null
   */
  public StandardCDSQuotingConvention getQuoteConvention() {
    return _quoteConvention;
  }

  /**
   * Sets the type of the quote.
   * @param quoteConvention  the new value of the property, not null
   */
  public void setQuoteConvention(StandardCDSQuotingConvention quoteConvention) {
    JodaBeanUtils.notNull(quoteConvention, "quoteConvention");
    this._quoteConvention = quoteConvention;
  }

  /**
   * Gets the the {@code quoteConvention} property.
   * @return the property, not null
   */
  public final Property<StandardCDSQuotingConvention> quoteConvention() {
    return metaBean().quoteConvention().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public CreditCurveSpecification clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CreditCurveSpecification other = (CreditCurveSpecification) obj;
      return JodaBeanUtils.equal(getCurveName(), other.getCurveName()) &&
          JodaBeanUtils.equal(getNodes(), other.getNodes()) &&
          JodaBeanUtils.equal(getId(), other.getId()) &&
          JodaBeanUtils.equal(getCurveDate(), other.getCurveDate()) &&
          JodaBeanUtils.equal(getQuoteConvention(), other.getQuoteConvention());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurveName());
    hash = hash * 31 + JodaBeanUtils.hashCode(getNodes());
    hash = hash * 31 + JodaBeanUtils.hashCode(getId());
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurveDate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getQuoteConvention());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("CreditCurveSpecification{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("curveName").append('=').append(JodaBeanUtils.toString(getCurveName())).append(',').append(' ');
    buf.append("nodes").append('=').append(JodaBeanUtils.toString(getNodes())).append(',').append(' ');
    buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
    buf.append("curveDate").append('=').append(JodaBeanUtils.toString(getCurveDate())).append(',').append(' ');
    buf.append("quoteConvention").append('=').append(JodaBeanUtils.toString(getQuoteConvention())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CreditCurveSpecification}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code curveName} property.
     */
    private final MetaProperty<String> _curveName = DirectMetaProperty.ofReadWrite(
        this, "curveName", CreditCurveSpecification.class, String.class);
    /**
     * The meta-property for the {@code nodes} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Collection<CurveNodeWithIdentifier>> _nodes = DirectMetaProperty.ofReadWrite(
        this, "nodes", CreditCurveSpecification.class, (Class) Collection.class);
    /**
     * The meta-property for the {@code id} property.
     */
    private final MetaProperty<CreditCurveIdentifier> _id = DirectMetaProperty.ofReadWrite(
        this, "id", CreditCurveSpecification.class, CreditCurveIdentifier.class);
    /**
     * The meta-property for the {@code curveDate} property.
     */
    private final MetaProperty<LocalDate> _curveDate = DirectMetaProperty.ofReadWrite(
        this, "curveDate", CreditCurveSpecification.class, LocalDate.class);
    /**
     * The meta-property for the {@code quoteConvention} property.
     */
    private final MetaProperty<StandardCDSQuotingConvention> _quoteConvention = DirectMetaProperty.ofReadWrite(
        this, "quoteConvention", CreditCurveSpecification.class, StandardCDSQuotingConvention.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "curveName",
        "nodes",
        "id",
        "curveDate",
        "quoteConvention");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return _curveName;
        case 104993457:  // nodes
          return _nodes;
        case 3355:  // id
          return _id;
        case 770856253:  // curveDate
          return _curveDate;
        case 2049149709:  // quoteConvention
          return _quoteConvention;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CreditCurveSpecification> builder() {
      return new DirectBeanBuilder<>(new CreditCurveSpecification());
    }

    @Override
    public Class<? extends CreditCurveSpecification> beanType() {
      return CreditCurveSpecification.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code curveName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> curveName() {
      return _curveName;
    }

    /**
     * The meta-property for the {@code nodes} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Collection<CurveNodeWithIdentifier>> nodes() {
      return _nodes;
    }

    /**
     * The meta-property for the {@code id} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<CreditCurveIdentifier> id() {
      return _id;
    }

    /**
     * The meta-property for the {@code curveDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> curveDate() {
      return _curveDate;
    }

    /**
     * The meta-property for the {@code quoteConvention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<StandardCDSQuotingConvention> quoteConvention() {
      return _quoteConvention;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          return ((CreditCurveSpecification) bean).getCurveName();
        case 104993457:  // nodes
          return ((CreditCurveSpecification) bean).getNodes();
        case 3355:  // id
          return ((CreditCurveSpecification) bean).getId();
        case 770856253:  // curveDate
          return ((CreditCurveSpecification) bean).getCurveDate();
        case 2049149709:  // quoteConvention
          return ((CreditCurveSpecification) bean).getQuoteConvention();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 771153946:  // curveName
          ((CreditCurveSpecification) bean).setCurveName((String) newValue);
          return;
        case 104993457:  // nodes
          ((CreditCurveSpecification) bean).setNodes((Collection<CurveNodeWithIdentifier>) newValue);
          return;
        case 3355:  // id
          ((CreditCurveSpecification) bean).setId((CreditCurveIdentifier) newValue);
          return;
        case 770856253:  // curveDate
          ((CreditCurveSpecification) bean).setCurveDate((LocalDate) newValue);
          return;
        case 2049149709:  // quoteConvention
          ((CreditCurveSpecification) bean).setQuoteConvention((StandardCDSQuotingConvention) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((CreditCurveSpecification) bean)._curveName, "curveName");
      JodaBeanUtils.notNull(((CreditCurveSpecification) bean)._nodes, "nodes");
      JodaBeanUtils.notNull(((CreditCurveSpecification) bean)._id, "id");
      JodaBeanUtils.notNull(((CreditCurveSpecification) bean)._curveDate, "curveDate");
      JodaBeanUtils.notNull(((CreditCurveSpecification) bean)._quoteConvention, "quoteConvention");
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
