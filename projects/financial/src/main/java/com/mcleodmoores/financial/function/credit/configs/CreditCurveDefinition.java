/**
 * Copyright (C) 2019 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.financial.function.credit.configs;

import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.core.config.Config;
import com.opengamma.core.config.ConfigGroups;
import com.opengamma.financial.analytics.curve.CurveDefinition;
import com.opengamma.financial.analytics.ircurve.strips.CurveNode;
import com.opengamma.id.ObjectId;
import com.opengamma.id.ObjectIdentifiable;
import com.opengamma.util.credit.CreditCurveIdentifier;

/**
 *
 */
@BeanDefinition
@Config(description = "Credit curve definition", group = ConfigGroups.CURVES)
public class CreditCurveDefinition extends CurveDefinition implements ObjectIdentifiable {
  private static final long serialVersionUID = 1L;

  /**
   * The object identifier, which should be derived from a {@link CreditCurveIdentifier}.
   */
  @PropertyDefinition(validate = "notNull")
  private ObjectId _objectId;

  /**
   * For the builder.
   */
  CreditCurveDefinition() {
    super();
  }

  public CreditCurveDefinition(final String name, final CreditCurveIdentifier creditCurveIdentifier, final Set<CurveNode> nodes) {
    super(name, nodes);
    setObjectId(creditCurveIdentifier.getObjectId());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CreditCurveDefinition}.
   * @return the meta-bean, not null
   */
  public static CreditCurveDefinition.Meta meta() {
    return CreditCurveDefinition.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(CreditCurveDefinition.Meta.INSTANCE);
  }

  @Override
  public CreditCurveDefinition.Meta metaBean() {
    return CreditCurveDefinition.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the object identifier, which should be derived from a {@link CreditCurveIdentifier}.
   * @return the value of the property, not null
   */
  public ObjectId getObjectId() {
    return _objectId;
  }

  /**
   * Sets the object identifier, which should be derived from a {@link CreditCurveIdentifier}.
   * @param objectId  the new value of the property, not null
   */
  public void setObjectId(ObjectId objectId) {
    JodaBeanUtils.notNull(objectId, "objectId");
    this._objectId = objectId;
  }

  /**
   * Gets the the {@code objectId} property.
   * @return the property, not null
   */
  public final Property<ObjectId> objectId() {
    return metaBean().objectId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public CreditCurveDefinition clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CreditCurveDefinition other = (CreditCurveDefinition) obj;
      return JodaBeanUtils.equal(getObjectId(), other.getObjectId()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash = hash * 31 + JodaBeanUtils.hashCode(getObjectId());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("CreditCurveDefinition{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("objectId").append('=').append(JodaBeanUtils.toString(getObjectId())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CreditCurveDefinition}.
   */
  public static class Meta extends CurveDefinition.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code objectId} property.
     */
    private final MetaProperty<ObjectId> _objectId = DirectMetaProperty.ofReadWrite(
        this, "objectId", CreditCurveDefinition.class, ObjectId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "objectId");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 90495162:  // objectId
          return _objectId;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CreditCurveDefinition> builder() {
      return new DirectBeanBuilder<CreditCurveDefinition>(new CreditCurveDefinition());
    }

    @Override
    public Class<? extends CreditCurveDefinition> beanType() {
      return CreditCurveDefinition.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code objectId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ObjectId> objectId() {
      return _objectId;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 90495162:  // objectId
          return ((CreditCurveDefinition) bean).getObjectId();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 90495162:  // objectId
          ((CreditCurveDefinition) bean).setObjectId((ObjectId) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((CreditCurveDefinition) bean)._objectId, "objectId");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
