/**
 * Copyright (C) 2015 - present McLeod Moores Software Limited.  All rights reserved.
 */
package com.opengamma.financial.analytics.ircurve.strips;

import java.util.Map;

import org.apache.commons.lang.NotImplementedException;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.ExternalId;
import com.opengamma.util.money.Currency;
import com.opengamma.util.time.Tenor;
import org.joda.beans.MetaBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

/**
 *
 */
@BeanDefinition
public class FxSpotNode extends CurveNode /*implements StarlingVisitableCurveNode*/ {

  /** Serialization version */
  private static final long serialVersionUID = 1L;

  /**
   * The FX spot convention.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _fxSpotConvention;

  /**
   * The pay currency.
   */
  @PropertyDefinition(validate = "notNull")
  private Currency _payCurrency;

  /**
   * The receive currency.
   */
  @PropertyDefinition(validate = "notNull")
  private Currency _receiveCurrency;

  /**
   * Used by the builder.
   */
  /* package */ FxSpotNode() {
  }

  public FxSpotNode(final ExternalId fxSpotConvention, final Currency payCurrency, final Currency receiveCurrency, final String curveNodeIdMapperName) {
    super(curveNodeIdMapperName);
    setFxSpotConvention(fxSpotConvention);
    setPayCurrency(payCurrency);
    setReceiveCurrency(receiveCurrency);
  }

  @Override
  public Tenor getResolvedMaturity() {
    //TODO check this
    return Tenor.SN;
  }

  @Override
  public <T> T accept(final CurveNodeVisitor<T> visitor) {
    throw new NotImplementedException();
//    return visitor.visitFxSpotNode(this);
  }

//  @Override
//  public <T> T accept(final StarlingCurveNodeVisitor<T> visitor) {
//    return visitor.visitFxSpotNode(this);
//  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code FxSpotNode}.
   * @return the meta-bean, not null
   */
  public static FxSpotNode.Meta meta() {
    return FxSpotNode.Meta.INSTANCE;
  }

  static {
    MetaBean.register(FxSpotNode.Meta.INSTANCE);
  }

  @Override
  public FxSpotNode.Meta metaBean() {
    return FxSpotNode.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the FX spot convention.
   * @return the value of the property, not null
   */
  public ExternalId getFxSpotConvention() {
    return _fxSpotConvention;
  }

  /**
   * Sets the FX spot convention.
   * @param fxSpotConvention  the new value of the property, not null
   */
  public void setFxSpotConvention(ExternalId fxSpotConvention) {
    JodaBeanUtils.notNull(fxSpotConvention, "fxSpotConvention");
    this._fxSpotConvention = fxSpotConvention;
  }

  /**
   * Gets the the {@code fxSpotConvention} property.
   * @return the property, not null
   */
  public final Property<ExternalId> fxSpotConvention() {
    return metaBean().fxSpotConvention().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the pay currency.
   * @return the value of the property, not null
   */
  public Currency getPayCurrency() {
    return _payCurrency;
  }

  /**
   * Sets the pay currency.
   * @param payCurrency  the new value of the property, not null
   */
  public void setPayCurrency(Currency payCurrency) {
    JodaBeanUtils.notNull(payCurrency, "payCurrency");
    this._payCurrency = payCurrency;
  }

  /**
   * Gets the the {@code payCurrency} property.
   * @return the property, not null
   */
  public final Property<Currency> payCurrency() {
    return metaBean().payCurrency().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the receive currency.
   * @return the value of the property, not null
   */
  public Currency getReceiveCurrency() {
    return _receiveCurrency;
  }

  /**
   * Sets the receive currency.
   * @param receiveCurrency  the new value of the property, not null
   */
  public void setReceiveCurrency(Currency receiveCurrency) {
    JodaBeanUtils.notNull(receiveCurrency, "receiveCurrency");
    this._receiveCurrency = receiveCurrency;
  }

  /**
   * Gets the the {@code receiveCurrency} property.
   * @return the property, not null
   */
  public final Property<Currency> receiveCurrency() {
    return metaBean().receiveCurrency().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public FxSpotNode clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FxSpotNode other = (FxSpotNode) obj;
      return JodaBeanUtils.equal(getFxSpotConvention(), other.getFxSpotConvention()) &&
          JodaBeanUtils.equal(getPayCurrency(), other.getPayCurrency()) &&
          JodaBeanUtils.equal(getReceiveCurrency(), other.getReceiveCurrency()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash = hash * 31 + JodaBeanUtils.hashCode(getFxSpotConvention());
    hash = hash * 31 + JodaBeanUtils.hashCode(getPayCurrency());
    hash = hash * 31 + JodaBeanUtils.hashCode(getReceiveCurrency());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("FxSpotNode{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("fxSpotConvention").append('=').append(JodaBeanUtils.toString(getFxSpotConvention())).append(',').append(' ');
    buf.append("payCurrency").append('=').append(JodaBeanUtils.toString(getPayCurrency())).append(',').append(' ');
    buf.append("receiveCurrency").append('=').append(JodaBeanUtils.toString(getReceiveCurrency())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FxSpotNode}.
   */
  public static class Meta extends CurveNode.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code fxSpotConvention} property.
     */
    private final MetaProperty<ExternalId> _fxSpotConvention = DirectMetaProperty.ofReadWrite(
        this, "fxSpotConvention", FxSpotNode.class, ExternalId.class);
    /**
     * The meta-property for the {@code payCurrency} property.
     */
    private final MetaProperty<Currency> _payCurrency = DirectMetaProperty.ofReadWrite(
        this, "payCurrency", FxSpotNode.class, Currency.class);
    /**
     * The meta-property for the {@code receiveCurrency} property.
     */
    private final MetaProperty<Currency> _receiveCurrency = DirectMetaProperty.ofReadWrite(
        this, "receiveCurrency", FxSpotNode.class, Currency.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "fxSpotConvention",
        "payCurrency",
        "receiveCurrency");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1363040133:  // fxSpotConvention
          return _fxSpotConvention;
        case -295641895:  // payCurrency
          return _payCurrency;
        case -1228590060:  // receiveCurrency
          return _receiveCurrency;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends FxSpotNode> builder() {
      return new DirectBeanBuilder<>(new FxSpotNode());
    }

    @Override
    public Class<? extends FxSpotNode> beanType() {
      return FxSpotNode.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code fxSpotConvention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> fxSpotConvention() {
      return _fxSpotConvention;
    }

    /**
     * The meta-property for the {@code payCurrency} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Currency> payCurrency() {
      return _payCurrency;
    }

    /**
     * The meta-property for the {@code receiveCurrency} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Currency> receiveCurrency() {
      return _receiveCurrency;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1363040133:  // fxSpotConvention
          return ((FxSpotNode) bean).getFxSpotConvention();
        case -295641895:  // payCurrency
          return ((FxSpotNode) bean).getPayCurrency();
        case -1228590060:  // receiveCurrency
          return ((FxSpotNode) bean).getReceiveCurrency();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1363040133:  // fxSpotConvention
          ((FxSpotNode) bean).setFxSpotConvention((ExternalId) newValue);
          return;
        case -295641895:  // payCurrency
          ((FxSpotNode) bean).setPayCurrency((Currency) newValue);
          return;
        case -1228590060:  // receiveCurrency
          ((FxSpotNode) bean).setReceiveCurrency((Currency) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((FxSpotNode) bean)._fxSpotConvention, "fxSpotConvention");
      JodaBeanUtils.notNull(((FxSpotNode) bean)._payCurrency, "payCurrency");
      JodaBeanUtils.notNull(((FxSpotNode) bean)._receiveCurrency, "receiveCurrency");
      super.validate(bean);
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
