/**
 * Copyright (C) 2014-Present McLeod Moores Software Limited.  All rights reserved.
 */
package com.mcleodmoores.integration.serialization;

import java.util.Map;

import net.finmath.marketdata.model.curves.CurveInterface;
import net.finmath.marketdata.model.curves.DiscountCurveNelsonSiegelSvensson;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.util.ArgumentChecker;

/**
 * Bean for a Finmath {@link DiscountCurveNelsonSiegelSvensson}. The Nelson-Siegel-Svensson model expects
 * six parameters.
 */
@BeanDefinition
public class DiscountCurveNelsonSiegelSvenssonBean extends AbstractCurveBean {

  /** The serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The Nelson-Siegel-Svensson model parameters.
   */
  @PropertyDefinition(validate = "notNull")
  private double[] _parameters;

  /**
   * The time scaling factor.
   */
  @PropertyDefinition
  private double _timeScaling;

  /**
   * For the builder.
   */
  /* package */DiscountCurveNelsonSiegelSvenssonBean() {
    super();
  }

  /**
   * @param name The name of the curve, not null
   * @param referenceDateString The reference date string
   * @param parameters The parameters, not null. Must have six values
   * @param timeScaling The time scaling factor
   */
  public DiscountCurveNelsonSiegelSvenssonBean(final String name, final String referenceDateString, final double[] parameters, final double timeScaling) {
    super(name, referenceDateString);
    setParameters(parameters);
    ArgumentChecker.isTrue(parameters.length == 6, "Nelson-Siegel-Svensson model expects six parameters: have {}", parameters.length);
    setTimeScaling(timeScaling);
  }

  @Override
  public CurveInterface buildCurve() {
    return new DiscountCurveNelsonSiegelSvensson(getName(), getReferenceDate(), getParameters(), getTimeScaling());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DiscountCurveNelsonSiegelSvenssonBean}.
   * @return the meta-bean, not null
   */
  public static DiscountCurveNelsonSiegelSvenssonBean.Meta meta() {
    return DiscountCurveNelsonSiegelSvenssonBean.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(DiscountCurveNelsonSiegelSvenssonBean.Meta.INSTANCE);
  }

  @Override
  public DiscountCurveNelsonSiegelSvenssonBean.Meta metaBean() {
    return DiscountCurveNelsonSiegelSvenssonBean.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the Nelson-Siegel-Svensson model parameters.
   * @return the value of the property, not null
   */
  public double[] getParameters() {
    return _parameters;
  }

  /**
   * Sets the Nelson-Siegel-Svensson model parameters.
   * @param parameters  the new value of the property, not null
   */
  public void setParameters(double[] parameters) {
    JodaBeanUtils.notNull(parameters, "parameters");
    this._parameters = parameters;
  }

  /**
   * Gets the the {@code parameters} property.
   * @return the property, not null
   */
  public final Property<double[]> parameters() {
    return metaBean().parameters().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the time scaling factor.
   * @return the value of the property
   */
  public double getTimeScaling() {
    return _timeScaling;
  }

  /**
   * Sets the time scaling factor.
   * @param timeScaling  the new value of the property
   */
  public void setTimeScaling(double timeScaling) {
    this._timeScaling = timeScaling;
  }

  /**
   * Gets the the {@code timeScaling} property.
   * @return the property, not null
   */
  public final Property<Double> timeScaling() {
    return metaBean().timeScaling().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public DiscountCurveNelsonSiegelSvenssonBean clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DiscountCurveNelsonSiegelSvenssonBean other = (DiscountCurveNelsonSiegelSvenssonBean) obj;
      return JodaBeanUtils.equal(getParameters(), other.getParameters()) &&
          JodaBeanUtils.equal(getTimeScaling(), other.getTimeScaling()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash = hash * 31 + JodaBeanUtils.hashCode(getParameters());
    hash = hash * 31 + JodaBeanUtils.hashCode(getTimeScaling());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("DiscountCurveNelsonSiegelSvenssonBean{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("parameters").append('=').append(JodaBeanUtils.toString(getParameters())).append(',').append(' ');
    buf.append("timeScaling").append('=').append(JodaBeanUtils.toString(getTimeScaling())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DiscountCurveNelsonSiegelSvenssonBean}.
   */
  public static class Meta extends AbstractCurveBean.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code parameters} property.
     */
    private final MetaProperty<double[]> _parameters = DirectMetaProperty.ofReadWrite(
        this, "parameters", DiscountCurveNelsonSiegelSvenssonBean.class, double[].class);
    /**
     * The meta-property for the {@code timeScaling} property.
     */
    private final MetaProperty<Double> _timeScaling = DirectMetaProperty.ofReadWrite(
        this, "timeScaling", DiscountCurveNelsonSiegelSvenssonBean.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "parameters",
        "timeScaling");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 458736106:  // parameters
          return _parameters;
        case -1680281606:  // timeScaling
          return _timeScaling;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends DiscountCurveNelsonSiegelSvenssonBean> builder() {
      return new DirectBeanBuilder<DiscountCurveNelsonSiegelSvenssonBean>(new DiscountCurveNelsonSiegelSvenssonBean());
    }

    @Override
    public Class<? extends DiscountCurveNelsonSiegelSvenssonBean> beanType() {
      return DiscountCurveNelsonSiegelSvenssonBean.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code parameters} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<double[]> parameters() {
      return _parameters;
    }

    /**
     * The meta-property for the {@code timeScaling} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> timeScaling() {
      return _timeScaling;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 458736106:  // parameters
          return ((DiscountCurveNelsonSiegelSvenssonBean) bean).getParameters();
        case -1680281606:  // timeScaling
          return ((DiscountCurveNelsonSiegelSvenssonBean) bean).getTimeScaling();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 458736106:  // parameters
          ((DiscountCurveNelsonSiegelSvenssonBean) bean).setParameters((double[]) newValue);
          return;
        case -1680281606:  // timeScaling
          ((DiscountCurveNelsonSiegelSvenssonBean) bean).setTimeScaling((Double) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((DiscountCurveNelsonSiegelSvenssonBean) bean)._parameters, "parameters");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
